using AIPXiaoTong.IService;
using AIPXiaoTong.Model;
using AIPXiaoTong.Model.API;
using AIPXiaoTong.Model.Site;
using AIPXiaoTong.Service;
using Framework.Common;
using Framework.LambdaExpression;
using NLog;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using System.Web;
using System.Web.Mvc;
using Webdiyer.WebControls.Mvc;

namespace AIPXiaoTong.Site.Controllers
{
    [AllowAnonymous]
    public class APIController : Controller
    {
        public ILogger logger;
        private string key = "1234567890";
        private IEmployeeService iEmployeeService;
        private IOrderBookingService iOrderBookingService;
        private IOrderHousePaymentService iOrderHousePaymentService;
        private IOrderPaidService iOrderPaidService;
        private IMemberService iMemberService;
        private IProjectService iProjectService;
        private IHouseTypeShowService iHouseTypeShowService;
        private ITltService iTltService;
        private IBankCardService iBankCardService;
        private IEquipmentService iEquipmentService;
        private IBankService iBankService;

        public APIController(IEmployeeService iEmployeeService,
                              IOrderBookingService iOrderBookingService,
                              IOrderHousePaymentService iOrderHousePaymentService,
                              IOrderPaidService iOrderPaidService,
                              IMemberService iMemberService,
                              IProjectService iProjectService,
                              IHouseTypeShowService iHouseTypeShowService,
                              ITltService iTltService,
                              IBankCardService iBankCardService,
                              IEquipmentService iEquipmentService,
                               IBankService iBankService)
        {
            this.iEmployeeService = iEmployeeService;
            this.iOrderBookingService = iOrderBookingService;
            this.iOrderHousePaymentService = iOrderHousePaymentService;
            this.iOrderPaidService = iOrderPaidService;
            this.iMemberService = iMemberService;
            this.iProjectService = iProjectService;
            this.iHouseTypeShowService = iHouseTypeShowService;
            this.iTltService = iTltService;
            this.iBankCardService = iBankCardService;
            this.iEquipmentService = iEquipmentService;
            this.iBankService = iBankService;
            logger = LogManager.GetCurrentClassLogger();
        }

        protected override void OnActionExecuting(ActionExecutingContext filterContext)
        {
            string content = Request.Form.ToString();

            if (string.IsNullOrWhiteSpace(content))
                content = Request.QueryString.ToString();

            content = HttpUtility.UrlDecode(content);

            logger.Trace("Action：" + filterContext.RouteData.Values["action"] + "|" + content);

            BaseResponse response = new BaseResponse();

            if (!ModelState.IsValid)
            {
                response.requestno = Request["requestno"] ?? "";
                response.resultmsg = "数据不合法：" + ModelState.Values.Where(t => t.Errors.Count > 0).FirstOrDefault().Errors.FirstOrDefault().ErrorMessage;
                filterContext.Result = new JsonResult { Data = response, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                return;
            }

            if (Request.Url.Host == "localhost")
                return;

            var result = Verify(content);

            if (!result)
            {
                response = new BaseResponse();
                response.requestno = Request["requestno"] ?? "";
                response.resultmsg = "验签失败";

                filterContext.Result = new JsonResult { Data = response, JsonRequestBehavior = JsonRequestBehavior.AllowGet };
                return;
            }
        }

        private bool Verify(string content)
        {
            Dictionary<string, string> dic = new Dictionary<string, string>();

            foreach (var m in content.Split('&'))
            {
                var n = m.Split('=');
                if (n.Length >= 2 && !string.IsNullOrWhiteSpace(n[1]))
                {
                    dic.Add(n[0], n[1]);
                }
            }

            if (dic.ContainsKey("key"))
            {
                dic.Remove("key");
            }

            dic.Add("key", key);

            string sign = dic.ContainsKey("sign") ? dic["sign"] : "";

            dic.Remove("sign");

            string signString = "";

            foreach (var m in dic.OrderBy(t => t.Key))
            {
                signString += "&" + m.Key + "=" + m.Value;
            }

            signString = signString.Substring(1);

            string md5 = Framework.Security.Crypt.MD5(signString);

            if (!string.IsNullOrWhiteSpace(sign) && sign == md5)
            {
                return true;
            }

            return false;
        }

        /// <summary>
        /// 用户登录接口
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        public string Login(LoginRequest request)
        {
            var result = new LoginResponse() { requestno = request.requestno.Trim() };

            try
            {
                if (!ModelState.IsValid)
                    throw new APIException(ModelState.Values.Where(t => t.Errors.Count > 0).FirstOrDefault().Errors.FirstOrDefault().ErrorMessage);

                var e = iEquipmentService.Get(t => t.EquipmentSNNo == request.equipmentsnno);

                if (e == null)
                    throw new APIException("此设备未绑定");

                var employee = iEmployeeService.Get(t => t.Code == request.employeecode && t.MerchantID == e.MerchantID);

                if (employee == null)
                    throw new APIException("账号不存在");

                if (employee.Password != request.password)
                    throw new APIException("密码不正确");

                result.employeecode = employee.Code;
                result.employeeid = employee.ID.ToString();
                result.merchantid = employee.MerchantID.ToString();
            }
            catch (APIException ex)
            {
                result.resultmsg = ex.Message;
                result.retsultcode = ex.ErrorCode;
            }

            return JsonHelper.Serialize(result);
        }

        /// <summary>
        /// 单个“预约订单”查询接口
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        public string QueryOrderBookingDetail(QueryOrderBookingDetailRequst request)
        {
            var result = new QueryOrderBookingDetailResponse() { requestno = request.requestno.Trim() };

            try
            {
                if (!ModelState.IsValid)
                    throw new APIException(ModelState.Values.Where(t => t.Errors.Count > 0).FirstOrDefault().Errors.FirstOrDefault().ErrorMessage);

                var orderBooking = iOrderBookingService.Get(t => t.OrderNumber == request.ordernumber.Trim());

                if (orderBooking == null)
                    throw new APIException("订单不存在");

                result.orderbookingid = orderBooking.ID.ToString();
                result.ordernumber = orderBooking.OrderNumber;
                result.merchantid = orderBooking.MerchantID.ToString();
                result.merchantname = orderBooking.Merchant.Name;
                result.projectid = orderBooking.ProjectID.ToString();
                result.projectname = orderBooking.Project.ProjetName;
                result.equipmentsnno = orderBooking.EquipmentSNNo;
                result.memberid = orderBooking.MemberID.ToString();
                result.membername = orderBooking.Member.Name;
                result.membermobile = orderBooking.Member.Mobile;
                result.memberidnumber = orderBooking.Member.IDNumber;
                result.ordertime = orderBooking.OrderTime.ToString();
                result.remark = orderBooking.Remark;
                result.employeeid = orderBooking.EmployeeID.ToString();
                result.employeename = orderBooking.Employee.Name;
                result.ordername = orderBooking.OrderName;
                result.ordermobile = orderBooking.OrderMobile;

            }
            catch (APIException ex)
            {
                result.resultmsg = ex.Message;
                result.retsultcode = ex.ErrorCode;
            }

            return JsonHelper.Serialize(result);
        }

        /// <summary>
        /// “预约订单”列表接口查询接口
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        public string QueryOrderBookingList(QueryOrderBookingListRequst request)
        {
            var result = new QueryOrderBookingListResponse() { requestno = request.requestno.Trim() };

            var model = new OrderBookingQM();

            try
            {
                if (!ModelState.IsValid)
                    throw new APIException(ModelState.Values.Where(t => t.Errors.Count > 0).FirstOrDefault().Errors.FirstOrDefault().ErrorMessage);

                var list = iOrderBookingService.GetListModel<OrderBookingLM, OrderBookingQM>(model);

                if (list.Count == 0)
                    throw new APIException("订单不存在");

                result.orderBookingList = new List<QueryOrderBookingListResponse.OrderBookingList>();

                for (int i = 0; i < list.Count; i++)
                {
                    result.orderBookingList.Add(new QueryOrderBookingListResponse.OrderBookingList()
                    {
                        orderbookingid = list[i].ID.ToString(),
                        ordernumber = list[i].OrderNumber,
                        projectid = list[i].ProjectID.ToString(),
                        projectname = list[i].ProjectName,
                        equipmentnumber = list[i].EquipmentNumber,
                        merchantid = list[i].MerchantID.ToString(),
                        merchantname = list[i].MemberName,
                        memberid = list[i].MemberID.ToString(),
                        membername = list[i].MerchantName,
                        membermobile = list[i].MemberMobile,
                        memberidnumber = list[i].MemberIDNumber,
                        ordertime = list[i].OrderTime.ToString(),
                        remark = list[i].Remark,
                        employeeid = list[i].EmployeeID.ToString(),
                        employeename = list[i].EmployeeName,

                    });
                }
            }
            catch (APIException ex)
            {
                result.resultmsg = ex.Message;
                result.retsultcode = ex.ErrorCode;
            }

            return JsonHelper.Serialize(result);
        }


        /// <summary>
        /// 预约订单创建接口
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        public string CreateOrderBooking(CreateOrderBookingRequst request)
        {
            var result = new CreateOrderBookingResponse() { requestno = request.requestno.Trim() };

            try
            {
                if (!ModelState.IsValid)
                    throw new APIException(ModelState.Values.Where(t => t.Errors.Count > 0).FirstOrDefault().Errors.FirstOrDefault().ErrorMessage);

                var employee = iEmployeeService.Get(t => t.ID == request.employeeid && t.Merchant.EquipmentList.FirstOrDefault(f => f.EquipmentSNNo == request.equipmentsnno.Trim()) != null);

                if (employee == null)
                    throw new APIException("员工不存在");

                var member = iMemberService.Get(t => t.Mobile == request.mobile.Trim() && t.Name == request.name.Trim());

                var entity = new OrderBooking();

                entity.OrderName = request.name;
                entity.OrderMobile = request.mobile;
                entity.MerchantID = employee.MerchantID;
                entity.OrderNumber = GuidHelper.GenUniqueId();
                entity.ProjectID = request.projectid;
                entity.EquipmentSNNo = request.equipmentsnno;
                entity.OrderTime = Convert.ToDateTime(request.ordertime);
                entity.Remark = request.remark;
                entity.EmployeeID = employee.ID;
                entity.MemberID = member?.ID;

                iOrderBookingService.Save(entity);

                result.ordernumber = entity.OrderNumber;
                result.orderbookingid = entity.ID.ToString();

                iOrderBookingService.Commit();

            }
            catch (APIException ex)
            {
                result.resultmsg = ex.Message;
                result.retsultcode = ex.ErrorCode;
            }

            return JsonHelper.Serialize(result);
        }

        /// <summary>
        /// 单个“房款订单”查询接口
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        public string QueryOrderHousePaymentDetail(QueryOrderHousePaymentDetailRequst request)
        {
            var result = new QueryOrderHousePaymentDetailResponse() { requestno = request.requestno.Trim() };

            try
            {
                if (!ModelState.IsValid)
                    throw new APIException(ModelState.Values.Where(t => t.Errors.Count > 0).FirstOrDefault().Errors.FirstOrDefault().ErrorMessage);

                var orderHousePayment = iOrderHousePaymentService.Get(t => t.OrderNumber == request.ordernumber.Trim());

                if (orderHousePayment == null)
                    throw new APIException("订单不存在");

                result.orderhousepaymentid = orderHousePayment.ID.ToString();
                result.ordernumber = orderHousePayment.OrderNumber;
                result.merchantid = orderHousePayment.MemberID.ToString();
                result.merchantname = orderHousePayment.Merchant.Name;
                result.projectid = orderHousePayment.ProjectID.ToString();
                result.projectname = orderHousePayment.Project.ProjetName.ToString();
                result.equipmentsnno = orderHousePayment.EquipmentSNNo;
                result.transactionamount = orderHousePayment.TransactionAmount.ToString();
                result.serialnumber = orderHousePayment.SerialNumber.Trim();
                result.memberid = orderHousePayment.MemberID.ToString();
                result.membername = orderHousePayment.Member.Name;
                result.membermobile = orderHousePayment.Member.Mobile;
                result.memberidnumber = orderHousePayment.Member.IDNumber;
                result.paymentstatus = orderHousePayment.PaymentStatus.ToString();
                result.paymentstatusdesc = orderHousePayment.PaymentStatusDesc;
                result.paymenttype = orderHousePayment.PaymentType.ToString();
                result.paymenttypedesc = orderHousePayment.PaymentTypeDesc;
                result.status = orderHousePayment.Status.ToString();
                result.statusdesc = orderHousePayment.StatusDesc.ToString();
                result.createdatetime = orderHousePayment.CreateDatetime.ToString();
                result.bankcardnumber = orderHousePayment.BankCardNumber;
                result.employeeid = orderHousePayment.EmployeeID.ToString();
                result.employeename = orderHousePayment.Employee.Name.ToString();
                result.remark = orderHousePayment.Remark;

            }
            catch (APIException ex)
            {
                result.resultmsg = ex.Message;
                result.retsultcode = ex.ErrorCode;
            }

            return JsonHelper.Serialize(result);
        }

        /// <summary>
        /// “房款订单”列表查询接口
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        public string QueryOrderHousePaymentList(QueryOrderHousePaymentListRequst request)
        {
            var result = new QueryOrderHousePaymentListResponse() { requestno = request.requestno.Trim() };

            var model = new OrderHousePaymentQM();

            try
            {
                if (!ModelState.IsValid)
                    throw new APIException(ModelState.Values.Where(t => t.Errors.Count > 0).FirstOrDefault().Errors.FirstOrDefault().ErrorMessage);

                var list = iOrderHousePaymentService.GetListModel<OrderHousePaymentLM, OrderHousePaymentQM>(model);

                if (list.Count == 0)
                    throw new APIException("订单不存在");

                result.orderHousePaymentList = new List<QueryOrderHousePaymentListResponse.OrderHousePaymentList>();

                for (int i = 0; i < list.Count; i++)
                {
                    result.orderHousePaymentList.Add(new QueryOrderHousePaymentListResponse.OrderHousePaymentList()
                    {
                        merchantid = list[i].MerchantID.ToString(),
                        merchantname = list[i].MemberName,
                        ordernumber = list[i].OrderNumber,
                        projectid = list[i].ProjectID.ToString(),
                        projectname = list[i].ProjectName,
                        equipmentnumber = list[i].EquipmentNumber,
                        transactionamount = list[i].TransactionAmount.ToString(),
                        serialnumber = list[i].SerialNumber,
                        memberid = list[i].MemberID.ToString(),
                        membername = list[i].MerchantName,
                        membermobile = list[i].MemberMobile,
                        memberidnumber = list[i].MemberIDNumber,
                        employeeid = list[i].EmployeeID.ToString(),
                        employeename = list[i].EmployeeName,
                        paymentstatus = list[i].PaymentStatus.ToString(),
                        paymentstatusdesc = list[i].PaymentStatusDesc,
                        paymenttype = list[i].PaymentType.ToString(),
                        paymenttypedesc = list[i].PaymentTypeDesc,
                        statusdesc = list[i].StatusDesc,
                        status = list[i].Status.ToString(),
                        bankcardnumber = list[i].BankCardNumber,
                        remark = list[i].Remark,
                    });
                }
            }
            catch (APIException ex)
            {
                result.resultmsg = ex.Message;
                result.retsultcode = ex.ErrorCode;
            }

            return JsonHelper.Serialize(result);
        }



        /// <summary>
        /// 房款订单创建接口
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        public string CreateOrderHousePayment(CreateOrderHousePaymentRequst request)
        {
            var result = new CreateOrderHousePaymentResponse() { requestno = request.requestno.Trim() };

            var entity = new OrderHousePayment();

            try
            {
                if (!ModelState.IsValid)
                    throw new APIException(ModelState.Values.Where(t => t.Errors.Count > 0).FirstOrDefault().Errors.FirstOrDefault().ErrorMessage);

                var employee = iEmployeeService.Get(t => t.ID == request.employeeid && t.Merchant.EquipmentList.FirstOrDefault(f => f.EquipmentSNNo == request.equipmentsnno.Trim()) != null);

                if (employee == null)
                    throw new APIException("员工不存在");

                entity.MerchantID = employee.MerchantID;
                entity.OrderNumber = GuidHelper.GenUniqueId();
                entity.ProjectID = request.projectid;
                entity.EquipmentSNNo = request.equipmentsnno;
                entity.Remark = request.remark;
                entity.EmployeeID = request.employeeid;
                entity.MemberID = request.memberid;
                entity.TransactionAmount = request.transactionamount;


                iOrderHousePaymentService.Save(entity);
                iOrderHousePaymentService.Commit();

                result.ordernumber = entity.OrderNumber;
                result.orderhousepaymentid = entity.ID.ToString();
            }
            catch (APIException ex)
            {
                result.resultmsg = ex.Message;
                result.retsultcode = ex.ErrorCode;
            }

            return JsonHelper.Serialize(result);
        }

        /// <summary>
        /// 查询单个“认缴订单”接口
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        public string QueryOrderPaidDetail(QueryOrderPaidDetailRequst request)
        {
            var result = new QueryOrderPaidDetailResponse() { requestno = request.requestno.Trim() };

            try
            {
                if (!ModelState.IsValid)
                    throw new APIException(ModelState.Values.Where(t => t.Errors.Count > 0).FirstOrDefault().Errors.FirstOrDefault().ErrorMessage);

                var orderPaid = iOrderPaidService.Get(t => t.OrderNumber == request.ordernumber.Trim());

                if (orderPaid == null)
                    throw new APIException("订单不存在");

                result.orderpaidid = orderPaid.ID.ToString();
                result.merchantid = orderPaid.MemberID.ToString();
                result.merchantname = orderPaid.Merchant.Name;
                result.ordernumber = orderPaid.OrderNumber;

                // result.housetypeshowid = orderPaid.HouseTypeShowID.ToString();
                // result.housetypename = orderPaid.HouseTypeShow.HouseTypeName;
                result.equipmentsnno = orderPaid.EquipmentSNNo;
                result.transactionamount = orderPaid.TransactionAmount.ToString();
                result.serialnumber = orderPaid.SerialNumber;
                result.memberid = orderPaid.MemberID.ToString();
                result.membername = orderPaid.Member.Name;
                result.membermobile = orderPaid.Member.Mobile;
                result.memberidnumber = orderPaid.MemberIDNumber;
                result.paymentstatus = orderPaid.PaymentStatus.ToString();
                result.paymentstatusdesc = orderPaid.PaymentStatusDesc;
                result.paymenttype = orderPaid.PaymentType.ToString();
                result.paymenttypedesc = orderPaid.PaymentTypeDesc;
                result.bankcardnumber = orderPaid.BankCardNumber;
                result.remark = orderPaid.Remark;
                result.status = orderPaid.Status.ToString();
                result.statusdesc = orderPaid.StatusDesc.ToString();
                result.createdatetime = orderPaid.CreateDatetime.ToString();
                result.employeeid = orderPaid.EmployeeID.ToString();
                result.employeename = orderPaid.Employee.Name.ToString();

            }
            catch (APIException ex)
            {
                result.resultmsg = ex.Message;
                result.retsultcode = ex.ErrorCode;
            }

            return JsonHelper.Serialize(result);
        }

        /// <summary>
        /// “认缴订单”列表查询接口
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        public string QueryOrderPaidList(QueryOrderPaidListRequst request)
        {
            var result = new QueryOrderPaidListResponse() { requestno = request.requestno.Trim() };

            var model = new OrderPaidQM();

            try
            {
                if (!ModelState.IsValid)
                    throw new APIException(ModelState.Values.Where(t => t.Errors.Count > 0).FirstOrDefault().Errors.FirstOrDefault().ErrorMessage);

                var list = iOrderPaidService.GetListModel<OrderPaidLM, OrderPaidQM>(model);

                if (list.Count == 0)
                    throw new APIException("订单不存在");

                result.orderPaidList = new List<QueryOrderPaidListResponse.OrderPaidList>();
                for (int i = 0; i < list.Count; i++)
                {
                    result.orderPaidList.Add(new QueryOrderPaidListResponse.OrderPaidList()
                    {
                        ordernumber = list[i].OrderNumber,
                        merchantid = list[i].MerchantID.ToString(),
                        merchantname = list[i].MerchantName,
                        projectid = list[i].ProjectID.ToString(),
                        projectname = list[i].ProjectName,
                        equipmentnumber = list[i].EquipmentNumber,
                        transactionamount = list[i].TransactionAmount,
                        serialnumber = list[i].SerialNumber,
                        memberid = list[i].MemberID.ToString(),
                        membername = list[i].MemberName,
                        membermobile = list[i].MemberMobile,
                        memberidnumber = list[i].MemberIDNumber,
                        employeeid = list[i].EmployeeID.ToString(),
                        employeename = list[i].EmployeeName,
                        paymentstatusdesc = list[i].PaymentStatusDesc,
                        paymentstatus = list[i].PaymentStatus.ToString(),
                        paymenttypedesc = list[i].PaymentTypeDesc,
                        paymenttype = list[i].PaymentType.ToString(),
                        statusdesc = list[i].StatusDesc,
                        status = list[i].Status.ToString(),
                        bankcardnumber = list[i].BankCardNumber,
                        rmark = list[i].Remark,

                    });
                }
            }
            catch (APIException ex)
            {
                result.resultmsg = ex.Message;
                result.retsultcode = ex.ErrorCode;
            }

            return JsonHelper.Serialize(result);
        }


        /// <summary>
        /// 认缴订单创建接口
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        public string CreateOrderPaid(CreateOrderPaidRequst request)
        {
            var result = new CreateOrderPaidResponse() { requestno = request.requestno.Trim() };

            try
            {
                if (!ModelState.IsValid)
                    throw new APIException(ModelState.Values.Where(t => t.Errors.Count > 0).FirstOrDefault().Errors.FirstOrDefault().ErrorMessage);

                var employee = iEmployeeService.Get(t => t.ID == request.employeeid && t.Merchant.EquipmentList.FirstOrDefault(f => f.EquipmentSNNo == request.equipmentsnno.Trim()) != null);

                if (employee == null)
                    throw new APIException("员工不存在");

                var entity = new OrderPaid();
                entity.MerchantID = employee.MerchantID;
                entity.OrderNumber = GuidHelper.GenUniqueId();
                entity.TransactionAmount = request.transactionamount;
                entity.HouseTypeShowID = request.housetypeshowid;
                entity.PaymentStatus = PaymentStatusEnum.Unpaid.ToInt();
                entity.PaymentType = PaymentTypeEnum.Default.ToInt();
                entity.Status = OrderStatusEnum.Unpaid.ToInt();
                entity.EquipmentSNNo = request.equipmentsnno;
                entity.Remark = request.remark;
                entity.EmployeeID = employee.ID;
                entity.MemberID = request.memberid;



                iOrderPaidService.Save(entity);
                iOrderPaidService.Commit();

                result.ordernumber = entity.OrderNumber;
                result.orderpaidid = entity.ID.ToString();
            }
            catch (APIException ex)
            {
                result.resultmsg = ex.Message;
                result.retsultcode = ex.ErrorCode;
            }



            return JsonHelper.Serialize(result);
        }

        /// <summary>
        /// “项目管理”单个项目详情查询
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        public string QueryProjectDetail(QueryProjectDetailRequst request)
        {
            var siteImageUrl = GlobalConfig.WebConfig.SiteImageUrl;
            var result = new QueryProjectDetailResponse() { requestno = request.requestno.Trim() };

            try
            {
                if (!ModelState.IsValid)
                    throw new APIException(ModelState.Values.Where(t => t.Errors.Count > 0).FirstOrDefault().Errors.FirstOrDefault().ErrorMessage);

                var project = iProjectService.Get(t => t.ID == request.projectid);

                if (project == null)
                    throw new APIException("订单不存在");

                if (project.AdvertisingImge != null)
                {
                    var advertisingimgelist = JsonHelper.Deserialize<List<string>>(project.AdvertisingImge);

                    for (int i = 0; i < advertisingimgelist.Count; i++)
                    {
                        advertisingimgelist[i] = siteImageUrl + advertisingimgelist[i].Replace("\\", "/");
                    }

                    result.advertisingimge = JsonHelper.Serialize(advertisingimgelist);
                }

                result.merchantid = project.MerchantID.ToString();
                result.merchantname = project.MerchantName.ToString();
                result.projetname = project.ProjetName.Trim();

                result.projectimage = siteImageUrl + project.ProjectImage.Replace("\\", "/");

                result.projectamount = project.ProjectAmount.ToString();
                result.residueamount = project.ResidueAmount.ToString();
                result.deadline = project.Deadline.ToString();
                result.description = project.Description.Trim();
                result.provincecode = project.ProvinceCode;
                result.provincename = project.ProvinceName.Trim();
                result.citycode = project.CityCode;
                result.cityname = project.CityName.Trim();
                result.status = project.Status.ToString();
                result.statusdesc = project.StatusDesc;

            }
            catch (APIException ex)
            {
                result.resultmsg = ex.Message;
                result.retsultcode = ex.ErrorCode;
            }

            return JsonHelper.Serialize(result);
        }

        /// <summary>
        /// “项目管理”项目列表查询
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        public string QueryProjectList(QueryProjectListRequst request)
        {
            var siteImageUrl = GlobalConfig.WebConfig.SiteImageUrl;
            var result = new QueryProjectListResponse() { requestno = request.requestno.Trim() };

            var model = new ProjectQM();

            try
            {
                if (!ModelState.IsValid)
                    throw new APIException(ModelState.Values.Where(t => t.Errors.Count > 0).FirstOrDefault().Errors.FirstOrDefault().ErrorMessage);

                var list = iProjectService.GetListModel<ProjectLM, ProjectQM>(model);

                if (list.Count == 0)
                    throw new APIException("订单不存在");

                result.projectList = new List<QueryProjectListResponse.ProjectList>();

                for (int i = 0; i < list.Count; i++)
                {
                    if (list[i].AdvertisingImge != null)
                    {
                        var advertisingimgelist = JsonHelper.Deserialize<List<string>>(list[i].AdvertisingImge);

                        for (int j = 0; j < advertisingimgelist.Count; j++)
                        {
                            advertisingimgelist[j] = siteImageUrl + advertisingimgelist[j].Replace("\\", "/");
                        }

                        list[i].AdvertisingImge = JsonHelper.Serialize(advertisingimgelist);
                    }

                    result.projectList.Add(new QueryProjectListResponse.ProjectList()
                    {
                        merchantid = list[i].MerchantID.ToString(),
                        merchantname = list[i].MerchantName,
                        projetname = list[i].ProjetName.Trim(),

                        projectimage = siteImageUrl + list[i].ProjectImage.Replace("\\", "/").Trim(),

                        projectamount = list[i].ProjectAmount.ToString(),
                        residueamount = list[i].ResidueAmount.ToString(),
                        deadline = list[i].Deadline.ToString(),
                        description = list[i].Description,
                        statusdesc = list[i].StatusDesc,
                        status = list[i].Status.ToString(),
                        provincename = list[i].ProvinceName,
                        cityname = list[i].CityName,
                        advertisingimge = list[i].AdvertisingImge,

                    });
                }
            }
            catch (APIException ex)
            {
                result.resultmsg = ex.Message;
                result.retsultcode = ex.ErrorCode;
            }

            return JsonHelper.Serialize(result);
        }

        /// <summary>
        /// “户型展示”单个信息查询
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        public string QueryHouseTypeShowDetail(QueryHouseTypeShowDetailRequst request)  //查询单个项目信息
        {
            var siteImageUrl = GlobalConfig.WebConfig.SiteImageUrl;
            var result = new QueryHouseTypeShowDetailResponse() { requestno = request.requestno.Trim() };

            try
            {
                if (!ModelState.IsValid)
                    throw new APIException(ModelState.Values.Where(t => t.Errors.Count > 0).FirstOrDefault().Errors.FirstOrDefault().ErrorMessage);

                var houseTypeShow = iHouseTypeShowService.Get(t => t.ID == request.housetypeshowid);

                if (houseTypeShow == null)
                    throw new APIException("订单不存在");

                result.merchantid = houseTypeShow.MerchantID.ToString();
                result.merchantname = houseTypeShow.MerchantName;
                result.projectid = houseTypeShow.ProjectID.ToString();
                result.projectname = houseTypeShow.ProjectName;
                result.housetypename = houseTypeShow.HouseTypeName;

                result.housethumbnailimage = siteImageUrl + houseTypeShow.HouseThumbnailImage.Replace("\\", "/");

                result.housetypearea = houseTypeShow.HouseTypeArea.ToString();
                result.description = houseTypeShow.Description;
                result.content = houseTypeShow.Content;

                if (houseTypeShow.HouseShowImage != null)
                {
                    var houseshowimagelist = JsonHelper.Deserialize<List<string>>(houseTypeShow.HouseShowImage);

                    for (int i = 0; i < houseshowimagelist.Count; i++)
                    {
                        houseshowimagelist[i] = siteImageUrl + houseshowimagelist[i].Replace("\\", "/");
                    }

                    result.houseshowimage = JsonHelper.Serialize(houseshowimagelist);
                }

            }
            catch (APIException ex)
            {
                result.resultmsg = ex.Message;
                result.retsultcode = ex.ErrorCode;
            }

            return JsonHelper.Serialize(result);
        }

        /// <summary>
        /// “户型管理”户型列表信息查询
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        public string QueryHouseTypeShowList(QueryHouseTypeShowListRequst request)
        {
            var siteImageUrl = GlobalConfig.WebConfig.SiteImageUrl;
            var result = new QueryHouseTypeShowListResponse() { requestno = request.requestno };

            var model = new HouseTypeShowQM();

            try
            {
                Expression<Func<HouseTypeShow, bool>> express = DynamicExpressions.True<HouseTypeShow>();

                if (!string.IsNullOrWhiteSpace(request.houstypename))
                {
                    express = express.AndAlso(t => t.HouseTypeName.Contains(request.houstypename.Trim()));
                }

                var list = iHouseTypeShowService.Gets(express, request.pageindex.ToInt(), request.pagesize.ToInt(), new OrderByExpression<HouseTypeShow, long>(t => t.ID, true));

                result.houseTypeShowList = new List<QueryHouseTypeShowListResponse.QueryHouseTypeShowList>();

                for (int i = 0; i < list.Count; i++)
                {
                    if (list[i].HouseShowImage != null)
                    {
                        var houseshowimagelist = JsonHelper.Deserialize<List<string>>(list[i].HouseShowImage);

                        for (int j = 0; j < houseshowimagelist.Count; j++)
                        {
                            houseshowimagelist[j] = siteImageUrl + houseshowimagelist[j].Replace("\\", "/");
                        }

                        list[i].HouseShowImage = JsonHelper.Serialize(houseshowimagelist);
                    }

                    result.houseTypeShowList.Add(new QueryHouseTypeShowListResponse.QueryHouseTypeShowList()
                    {
                        merchantid = list[i].MerchantID.ToString(),
                        merchantname = list[i].MerchantName,
                        projectid = list[i].ProjectID.ToString(),
                        projectname = list[i].ProjectName,
                        housetypename = list[i].HouseTypeName,
                        housetypearea = list[i].HouseTypeArea.ToString(),
                        description = list[i].Description,
                        content = HttpUtility.UrlEncode(list[i].Content),
                        housethumbnailimage = siteImageUrl + list[i].HouseThumbnailImage.Replace("\\", "/"),

                        houseshowimage = list[i].HouseShowImage,

                    });
                }
                result.pageindex = request.pageindex.ToInt();
                result.pagecount = Convert.ToInt32(Math.Ceiling(iHouseTypeShowService.Count(express) * 1.0 / request.pagesize.ToInt()));
            }
            catch (APIException ex)
            {
                result.resultmsg = ex.Message;
                result.retsultcode = ex.ErrorCode;
            }

            return JsonHelper.Serialize(result);
        }


        /// <summary>
        /// 会员信息创建接口(身份证创建)
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        public string CreateMember(CreateMemberRequst request)
        {
            var result = new CreateMemberResponse() { requestno = request.requestno.Trim() };

            try
            {
                if (!ModelState.IsValid)
                    throw new APIException(ModelState.Values.Where(t => t.Errors.Count > 0).FirstOrDefault().Errors.FirstOrDefault().ErrorMessage);

                var member = iMemberService.Get(t => t.IDNumber == request.idnumber.Trim());

                if (member != null)
                    throw new APIException("身份证已注册!");

                var entity = new Member();

                var IDImgPath = @"\Images\IDCardImage\";

                var IDImageFrontPath = IDImgPath + Guid.NewGuid() + ".jpg";
                var IDImageOppositePath = IDImgPath + Guid.NewGuid() + ".jpg";

                ImageHelper.Base64StringToImage(Server.MapPath(IDImageFrontPath), request.idimagefront);
                ImageHelper.Base64StringToImage(Server.MapPath(IDImageOppositePath), request.idimageopposite);

                entity.Name = request.name.Trim();
                entity.IDNumber = request.idnumber.Trim();


                entity.IDImageFront = IDImageFrontPath;
                entity.IDImageOpposite = IDImageOppositePath;


                iMemberService.Save(entity);
                iMemberService.Commit();

                result.memberid = entity.ID.ToString();
            }
            catch (APIException ex)
            {
                result.resultmsg = ex.Message;
                result.retsultcode = ex.ErrorCode;
            }

            return JsonHelper.Serialize(result);
        }




        /// <summary>
        /// 会员查询接口
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        public string QueryMemberInfo(QueryMemberInfoRequst request)  //查询单个项目信息
        {
            var result = new QueryMemberInfoResponse() { requestno = request.requestno };

            var siteImageUrl = GlobalConfig.WebConfig.SiteImageUrl;

            try
            {
                if (!ModelState.IsValid)
                    throw new APIException(ModelState.Values.Where(t => t.Errors.Count > 0).FirstOrDefault().Errors.FirstOrDefault().ErrorMessage);

                var member = iMemberService.Get(t => t.IDNumber == request.idnumber.Trim());

                var bankcard = iBankCardService.Get(t => t.MemberID == member.ID);

                if (member == null)
                    throw new APIException("身份证未注册");

                result.memberid = member.ID;
                result.name = member.Name;
                result.mobile = member.Mobile;
                result.idnumber = member.IDNumber;

                result.provincecode = member.ProvinceCode;
                result.provincename = member.ProvinceName;
                result.citycode = member.CityCode;
                result.cityname = member.CityName;
                result.idimagefront = siteImageUrl + member.IDImageFront.Replace("\\", "/");    //tupian
                result.idimageopposite = siteImageUrl + member.IDImageOpposite.Replace("\\", "/");
                result.address = member.Address;
                result.clientid = member.ClientId;
                result.enname = member.EnName;
                result.idexpireddate = member.IdExpiredDate.ToString();
                result.postcode = member.PostCode;
                result.iscreateaccount = member.IsCreateAccount.ToString();
                if (member.IsCreateAccount == 0)
                {
                    result.iscreateaccountdesc = "未开户";
                }
                else
                {
                    result.iscreateaccountdesc = "已开户";
                }

                if (bankcard != null)
                {
                    result.bankcardnumber = bankcard.BankCardNumber;
                    result.subbranchname = bankcard.SubBranchName;
                    result.status = bankcard.Status.ToString();
                    if (bankcard?.Status == 1)
                    {
                        result.statusdesc = "已校验";
                    }
                    else
                    {
                        result.statusdesc = "未校验";
                    }
                }
            }
            catch (APIException ex)
            {
                result.resultmsg = ex.Message;
                result.retsultcode = ex.ErrorCode;
            }

            return JsonHelper.Serialize(result);
        }



        /// <summary>
        /// 银行卡绑定接口
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        private void BankCardBinding(long memberID, string name, string idNumber, string bankCardNumber, string mobile, string bankCode)
        {
            //检测是否存在绑定银行卡

            var bankCard = iBankCardService.Get(t => t.MemberID == memberID && t.Status == 1) ?? new BankCard();

            if (bankCard.ID == 0)
            {
                var bank = this.iBankService.Get(t => t.Code == bankCode);

                if (bank == null)
                    throw new APIException("所属银行不存在");

                //不存在则校验并新增

                var respone = iTltService.AccountVerify4(name, idNumber, bankCardNumber, mobile);

                if (!respone.IsSuccess)
                    throw new APIException("验证失败：" + respone.ResultMessage);

                var entity = new BankCard();

                entity.MemberID = memberID;
                entity.BankCardNumber = bankCardNumber;
                entity.Mobile = mobile;
                entity.BankID = bank.ID;
                entity.SubBranchName = bank.Name;
                entity.Status = 1;

                iBankCardService.Save(entity);
                iBankCardService.Commit();
            }
            else
            {
                //存在则判断是否与原卡一致
                if (bankCard.BankCardNumber != bankCardNumber)
                {
                    throw new APIException("仅限绑定一张银行卡");
                }

            }

        }


        /// <summary>
        /// 开户信息提交接口
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        public string CreateAccount(CreateAccountRequst request)
        {
            var result = new CreateAccountResponse() { requestno = request.requestno.Trim() };

            try
            {
                if (!ModelState.IsValid)
                    throw new APIException(ModelState.Values.Where(t => t.Errors.Count > 0).FirstOrDefault().Errors.FirstOrDefault().ErrorMessage);

                var member = iMemberService.Get(t => t.IDNumber == request.idnumber.Trim());

                if (member == null)
                    throw new APIException("身份证未注册");

                BankCardBinding(member.ID, member.Name.Trim(), member.IDNumber.Trim(), request.bankcardnumber.Trim(), request.mobile.Trim(), request.bankcode.Trim());

                member.Address = request.address.Trim();
                member.EnName = "";
                member.Mobile = request.mobile.Trim();
                member.IdExpiredDate = request.idexpireddate.ToDateTime("yyyyMMdd");
                member.PostCode = request.postcode.Trim();
                member.ProvinceCode = request.provincecode.Trim();
                member.CityCode = request.citycode.Trim();
                member.IsCreateAccount = 1;

                iMemberService.Save(member);
                iMemberService.Commit();

                result.clientid = member.ClientId;
                result.memberid = member.ID.ToString();

            }
            catch (APIException ex)
            {
                result.resultmsg = ex.Message;
                result.retsultcode = ex.ErrorCode;
            }

            return JsonHelper.Serialize(result);
        }


        /// <summary>
        /// 身份证图片上传接口
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        public string UploadIDCardImg(UploadIDCardImgRequst request)
        {
            var result = new UploadIDCardImgResponse() { requestno = request.requestno.Trim() };
            var siteImageUrl = GlobalConfig.WebConfig.SiteImageUrl;

            try
            {
                if (!ModelState.IsValid)
                    throw new APIException(ModelState.Values.Where(t => t.Errors.Count > 0).FirstOrDefault().Errors.FirstOrDefault().ErrorMessage);

                var e = iMemberService.Get(t => t.ID == request.memberid);

                if (e == null)
                    throw new APIException("会员不存在");


                var IDImgPath = @"\Images\IDCardImage\";

                var IDImageFrontPath = IDImgPath + Guid.NewGuid() + ".jpg";
                var IDImageOppositePath = IDImgPath + Guid.NewGuid() + ".jpg";

                ImageHelper.Base64StringToImage(Server.MapPath(IDImageFrontPath), request.idimagefront);
                ImageHelper.Base64StringToImage(Server.MapPath(IDImageOppositePath), request.idimageopposite);


                e.IDImageFront = IDImageFrontPath;
                e.IDImageOpposite = IDImageOppositePath;

                iMemberService.Save(e);
                iMemberService.Commit();

                result.memberid = e.ID.ToString();

            }
            catch (APIException ex)
            {
                result.resultmsg = ex.Message;
                result.retsultcode = ex.ErrorCode;
            }

            return JsonHelper.Serialize(result);
        }


        /// <summary>
        /// 银行列表查询接口
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        public string GetBankInfo(GetBankInfoRequst request)  //查询单个项目信息
        {
            var result = new GetBankInfoResponse() { requestno = request.requestno };

            try
            {
                if (!ModelState.IsValid)
                    throw new APIException(ModelState.Values.Where(t => t.Errors.Count > 0).FirstOrDefault().Errors.FirstOrDefault().ErrorMessage);
                var model = new BankQM();

                var banklist = iProjectService.GetListModel<BankLM, BankQM>(model);


                if (banklist == null)
                    throw new APIException("无银行信息");


            }
            catch (APIException ex)
            {
                result.resultmsg = ex.Message;
                result.retsultcode = ex.ErrorCode;
            }

            return JsonHelper.Serialize(result);
        }




        //VSPExec vspExec = null;
        //public class RspObj
        //{
        //    public String appid;
        //    public String cusid;
        //    public String trxcode;
        //    public String timestamp;
        //    public String randomstr;
        //    public String sign;
        //    public String bizseq;
        //    public String retcode;
        //    public String retmsg;
        //    public String amount;
        //    public String trxreserve;

        //    public void init(String retCode, String retMsg, String APPID, String CUSID)
        //    {
        //        retcode = retCode;
        //        retmsg = retMsg;
        //        appid = APPID;
        //        cusid = CUSID;
        //        trxcode = "T001";
        //        timestamp = DateTime.Now.ToString("yyyyMMddHHmmss", DateTimeFormatInfo.InvariantInfo);
        //        randomstr = (new Random().Next(8999) + 1000).ToString();

        //    }

        //}
        ///// <summary>
        ///// 将参数排序组装
        ///// </summary>
        ///// <param name="param"></param>
        ///// <returns></returns>
        //public static String BuildParamStr(Dictionary<String, String> param)
        //{
        //    if (param == null || param.Count == 0)
        //    {
        //        return "";
        //    }
        //    Dictionary<String, String> ascDic = param.OrderBy(o => o.Key).ToDictionary(o => o.Key, p => p.Value);
        //    StringBuilder sb = new StringBuilder();
        //    foreach (var item in ascDic)
        //    {
        //        sb.Append(item.Key).Append("=").Append(item.Value).Append("&");
        //    }

        //    return sb.ToString().Substring(0, sb.ToString().Length - 1);
        //}

        ///// <summary>
        ///// 将查询结果实体加签
        ///// </summary>
        ///// <param name="rsp"></param>
        //public static RspObj BuildSignRspObj(RspObj rsp, string APPKEY)
        //{
        //    Dictionary<String, String> param = new Dictionary<string, string>();
        //    if (!String.IsNullOrEmpty(rsp.appid))
        //    {
        //        param.Add("appid", rsp.appid);
        //    }
        //    if (!String.IsNullOrEmpty(rsp.cusid))
        //    {
        //        param.Add("cusid", rsp.cusid);
        //    }
        //    if (!String.IsNullOrEmpty(rsp.trxcode))
        //    {
        //        param.Add("trxcode", rsp.trxcode);
        //    }
        //    if (!String.IsNullOrEmpty(rsp.timestamp))
        //    {
        //        param.Add("timestamp", rsp.timestamp);
        //    }
        //    if (!String.IsNullOrEmpty(rsp.randomstr))
        //    {
        //        param.Add("randomstr", rsp.randomstr);
        //    }
        //    if (!String.IsNullOrEmpty(rsp.bizseq))
        //    {
        //        param.Add("bizseq", rsp.bizseq);
        //    }
        //    if (!String.IsNullOrEmpty(rsp.retcode))
        //    {
        //        param.Add("retcode", rsp.retcode);
        //    }
        //    if (!String.IsNullOrEmpty(rsp.retmsg))
        //    {
        //        param.Add("retmsg", rsp.retmsg);
        //    }
        //    if (!String.IsNullOrEmpty(rsp.amount))
        //    {
        //        param.Add("amount", rsp.amount);
        //    }
        //    if (!String.IsNullOrEmpty(rsp.trxreserve))
        //    {
        //        param.Add("trxreserve", rsp.trxreserve);
        //    }
        //    param.Add("key", APPKEY);
        //    String blankStr = BuildParamStr(param);
        //    String sign = Framework.Security.Crypt.MD5(blankStr);
        //    rsp.sign = sign;
        //    return rsp;
        //}
        //public void GetOrderMsg()
        //{
        //    var POSCUSID = "142581072993330";
        //    var POSAPPKEY = "1234567890";
        //    var POSAPPID = "00008692";
        //    String bizseq = "";
        //    RspObj rsp = new RspObj();
        //    for (int i = 0; i < Request.Form.Count; i++)
        //    {
        //        if (Request.Form.Keys[i] == "bizseq")
        //        {
        //            bizseq = Request.Form[i].ToString();
        //        }
        //    }
        //    this.vspExec = new VSPExec("142581072993330", "1234567890", "00008692");



        //    string formString = HttpUtility.UrlDecode(Request.Form.ToString());
        //    Dictionary<String, String> dicReqeust = formString.ToDictionary(true);
        //    if (vspExec.IsVerify(dicReqeust))//验签成功
        //    { 
        //        rsp.init("0000", "查询成功",  POSAPPID,  POSCUSID);
        //        rsp.amount = "1";
        //        // rsp.trxreserve = "05##测试用户5#上海徐汇#13012345678#18103000085#0#123456789123456789####";
        //        rsp.trxreserve = "05##备注#chen#16675579403#bizseq#######";
        //        rsp.bizseq = "20181107163729899799";//业务流水号


        //    }
        //    else //验签失败
        //    {


        //    }
        //    rsp = BuildSignRspObj(rsp,  POSAPPKEY);//签名 

        //    Response.Write(JsonHelper.Serialize(rsp));
        //}

    }
}