using AIPXiaoTong.IService;
using AIPXiaoTong.Model;
using AIPXiaoTong.Model.Site;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;

namespace AIPXiaoTong.Site.Controllers
{
    public class HouseTypeShowController : BaseController
    {
        private IHouseTypeShowService iHouseTypeShowService;
        private IEmployeeService iEmployeeService;
        private IMerchantService iMerchantService;
        private IProjectManagementService iProjectManagementService;
        private IHouseTypeNameService iHouseTypeNameService;


        public HouseTypeShowController(IHouseTypeShowService iHouseTypeShowService,
                                        IEmployeeService iEmployeeService,
                                        IMerchantService iMerchantService,
                                        IProjectManagementService iProjectManagementService,
                                        IHouseTypeNameService iHouseTypeNameService)
        {
            this.iHouseTypeShowService = iHouseTypeShowService;
            this.iEmployeeService = iEmployeeService;
            this.iMerchantService = iMerchantService;
            this.iProjectManagementService = iProjectManagementService;
            this.iHouseTypeNameService = iHouseTypeNameService;
        }


        public ActionResult Index(HouseTypeShowQM model)
        {
            var list = this.iHouseTypeShowService.GetListModel<HouseTypeShowLM, HouseTypeShowQM>(model);

            BindData();

            if (Request.IsAjaxRequest())
            {
                return PartialView("Grid", list);
            }

            return View(list);
        }

        private void BindData()
        {
            var empInfo = iEmployeeService.Get(currentUser.ID) ?? new Employee();

            ViewBag.merInfo = iMerchantService.Get(empInfo.MerchantID);

            ViewBag.ProjectManagementList = iProjectManagementService.GetListModel<ProjectManagementLM, ProjectManagementQM>();

            ViewBag.HouseTypeNameList = iHouseTypeNameService.GetListModel<HouseTypeNameLM, HouseTypeNameQM>();
        }

        public ActionResult Create(long? ID = null)
        {
            var model = iHouseTypeShowService.GetViewModel<HouseTypeShowCM>(ID);

            BindData();

            return View(model);
        }

        [ValidateInput(false)]
        [ValidateAntiForgeryToken]
        [HttpPost]
        public ActionResult Create(HouseTypeShowCM m)
        {
            var entity = iHouseTypeShowService.Get(m.ID) ?? new HouseTypeShow();

            try
            {
                if (ModelState.IsValid)
                {
                    var empInfo = iEmployeeService.Get(currentUser.ID);

                    entity.MerchantID = empInfo.MerchantID;

                    entity.ProjectManagementID = m.ProjectManagementID;
                    entity.HouseTypeName = m.HouseTypeName;
                    entity.HouseTypeArea = m.HouseTypeArea;
                    entity.Content = m.Content;
                    entity.Description = m.Description;

                    if (entity.HouseThumbnailImage!=m.HouseThumbnailImage)
                    {
                        var TemFilePath = @"\Temp\TemHouseThumbnailImage" + m.HouseThumbnailImage.Substring(m.HouseThumbnailImage.LastIndexOf("\\"));

                        entity.HouseThumbnailImage = @"\Images\HouseThumbnailImage\" + Guid.NewGuid() + ".png";
                        System.IO.File.Copy(Server.MapPath(TemFilePath), Server.MapPath(entity.HouseThumbnailImage));
                    }


                    if (m.HouseShowImageList!=null)
                    {
                        var dirPath = @"\Temp\TemHouseShowImage";
                        var tarPath = @"\Images\HouseShowImage\";
                        for (int i = 0; i < m.HouseShowImageList.Count; i++)
                        {
                            var tempSource = dirPath + m.HouseShowImageList[i].Substring(m.HouseShowImageList[i].LastIndexOf("\\"));

                            var tarSource = tarPath + Guid.NewGuid() + ".png";
                            System.IO.File.Copy(Server.MapPath(tempSource), Server.MapPath(tarSource));

                            entity.HouseShowImage += tarSource + ";";
                        }
                    }



                    iHouseTypeShowService.Save(entity);
                    iHouseTypeShowService.Commit();

                    this.ShowTip();

                }
                else
                {
                    AddError();
                }
            }
            catch (Exception ex)
            {

                this.AddError(ErrorCode.Exception, ex.Message);
            }

            return RedirectToAction("Create", new { ID = entity.ID });
        }


        public JsonResult Delete(long ID)
        {
            var result = iHouseTypeShowService.AjaxDelete(ID);

            return Json(result, JsonRequestBehavior.AllowGet);
        }


        public JsonResult UploadHouseThumbnailImage()
        {
            return UploadFile("/Temp/TemHouseThumbnailImage/", Request.Files[0].FileName);
        }

        public JsonResult UploadHouseShowImage()
        {
            return UploadFile("/Temp/TemHouseShowImage/", Request.Files[0].FileName);
        }
        protected JsonResult UploadFile(string path, string fileName)
        {
            try
            {
                var file = Request.Files[0];
                path = System.Web.HttpContext.Current.Server.MapPath(path);
                if (!System.IO.Directory.Exists(path))
                {
                    System.IO.Directory.CreateDirectory(path);
                }
                string FilePath = path + fileName;
                file.SaveAs(FilePath);
                return Json(new { Msg = "", Path = FilePath, FileName = fileName }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new { Msg = ex.Message, Path = "", FileName = fileName }, JsonRequestBehavior.AllowGet);
            }
        }


        public ActionResult Details(long ID)
        {
            var model = iHouseTypeShowService.Get(ID);

            return View(model);
        }

    }
}