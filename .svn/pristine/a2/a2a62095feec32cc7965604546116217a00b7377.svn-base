using Framework.Common;
using Framework.Requests;
using GuangDaAPI.Model;
using NLog;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Web;

namespace GuangDaAPI
{
    public class GuangDaExec
    {
        /// <summary>
        /// 平台为接入系统分配的识别号
        /// </summary>
        private string UserId { get; set; }

        private string Url { get; set; }

        private string CertPath { get; set; }
        private string CertPwd { get; set; }

        public ILogger logger;

        public GuangDaExec(string UserId, string CertPath, string CertPwd, bool IsDebug)
        {
            logger = LogManager.GetCurrentClassLogger();

            this.UserId = UserId;
            this.CertPath = CertPath;
            this.CertPwd = CertPwd;

            //测试地址（业务测试）：https://testopen.cebbank.com/portal/bops.do
            //测试地址（验证测试）：http://testopen.cebbank.com/portalyz/bops.do

            this.Url = IsDebug ? "https://testopen.cebbank.com/portal/bops.do" : "https://open.cebbank.com/portal/bops.do";

        }

        public string GetXml<T>(IBaseRequest<T> request) where T : BaseResponse
        {
            string reqTime = DateTime.Now.ToLongDate();
            reqTime = "2018-11-07 15:53:05";

            //string headXml =
            //    "<ReqJnlNo>" + request.Head.ReqJnlNo + "</ReqJnlNo>" +
            //    "<ReqTime>" + reqTime + "</ReqTime>" +
            //    "<UserId>" + this.UserId + "</UserId>" +
            //    "<ReqId>" + request.Method + "</ReqId>";

            Dictionary<string, string> dicBody = request.GetBody();

            //string bodyXml = "";

            //foreach (var m in dicBody)
            //{
            //    bodyXml += "<" + m.Key + ">" + m.Value + "</" + m.Key + ">";
            //}

            dicBody.Add("ReqJnlNo", request.Head.ReqJnlNo);
            dicBody.Add("ReqTime", reqTime);
            dicBody.Add("UserId", this.UserId);
            dicBody.Add("ReqId", request.Method);

            string signContent = "";

            foreach (var m in dicBody.OrderBy(t => t.Key))
            {
                signContent += "&" + m.Key + "=" + m.Value;
            }

            signContent = signContent.Substring(1);

            string sign = Sign(signContent);


            //headXml += "<Sign>" + sign + "</Sign>";

            //string xml = "<Message><Head>" + headXml + "</Head><Body>" + bodyXml + "</Body></Message>";

            return signContent + "&Sign=" + sign;
        }

        public string Sign(string content)
        {
            return Framework.Security.Crypt.RSAEncryptByPrivateKey(content, this.CertPath, this.CertPwd);
        }

        public BaseResponse Exec<T>(IBaseRequest<T> request) where T : BaseResponse, new()
        {
            //拼接成URL

            string txtParams = GetXml(request);

            string result = "";
            string exception = "";

            try
            {
                //请求
                result = Request.Post(this.Url + "?" + txtParams);

                if (XmlHelper.IsXml(result))
                {
                    //把返回的内容序列化成对象
                    var response = XmlHelper.XmlDeserialize<T>(result);

                    return response;
                }
            }
            catch (Exception ex)
            {
                exception = ex.Message;
            }
            finally
            {
                logger.Trace("（普通请求）请求地址：" + this.Url + "，内容：" + txtParams + "，返回：" + result + ",http异常:" + exception);
            }

            return new T();
        }
    }
}
