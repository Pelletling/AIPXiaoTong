using AIPXiaoTong.Model;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using Framework.Common;
using Framework.Security;
using AIPXiaoTong.Model.Site;
using NLog;
using AIPXiaoTong.IService;
using PingAnAPI;
using AIPXiaoTong.Model.PingAnAPI;
using VSP.Pay;
using VSP.Pay.ResponseModel;
using System.Text;
using System.IO;
using System.Globalization;

namespace AIPXiaoTong.Site.Controllers
{
    [AllowAnonymous]
    public class PingAnNotifyController : BaseController
    {
       // public ILogger logger;
        private IAccountPingAnService iAccountPingAnService;
        private IOrderPaidService iOrderPaidService;
        private IMemberService iMemberService;
        private IPingAnOrderPaidService iPingAnOrderPaidService;
        private IPreferencesService iPreferencesService;
        private IPingAnOrderPaidRechargeService iPingAnOrderPaidRechargeService;

        VSPExec vspExec = null;
        private string content = "";

        private static string APIPrivateKey = System.Configuration.ConfigurationManager.AppSettings["PingAn_APIPrivateKey"].ToString();
        private static string publicKey = System.Configuration.ConfigurationManager.AppSettings["PingAn_APIPublicKey"].ToString();

        public PingAnNotifyController(IAccountPingAnService iAccountPingAnService,
                                      IOrderPaidService iOrderPaidService,
                                      IMemberService iMemberService,
                                      IPingAnOrderPaidService iPingAnOrderPaidService,
                                      IPreferencesService iPreferencesService,
                                      IPingAnOrderPaidRechargeService iPingAnOrderPaidRechargeService)
        {
            this.iAccountPingAnService = iAccountPingAnService;
            this.iOrderPaidService = iOrderPaidService;
            this.iMemberService = iMemberService;
            this.iPingAnOrderPaidService = iPingAnOrderPaidService;
            this.iPreferencesService = iPreferencesService;
            this.iPingAnOrderPaidRechargeService = iPingAnOrderPaidRechargeService;

            logger = LogManager.GetCurrentClassLogger();
        }

        protected override void OnActionExecuting(ActionExecutingContext filterContext)
        {
            content = Request.Form.ToString();

            if (string.IsNullOrWhiteSpace(content))
                content = Request.QueryString.ToString();

            logger.Trace("Action：" + filterContext.RouteData.Values["action"] + "|" + content);
        }

        protected override void OnActionExecuted(ActionExecutedContext filterContext)
        {
            logger.Trace("Action：" + filterContext.RouteData.Values["action"] + "|" + (filterContext.Result as ContentResult)?.Content);

            base.OnActionExecuted(filterContext);
        }


        /// <summary>
        /// 平安银行用户二类户开户成功后POS入金跳转页面
        /// </summary>
        /// <param name="encryptData"></param>
        /// <returns></returns>
        public ActionResult AccountNotify(string encryptData)
        {
            AccountPingAnTransDataDM model = new AccountPingAnTransDataDM();

            try
            {
                if (!string.IsNullOrEmpty(encryptData))
                {
                    var privateKey = RSAHelper.RSAPrivateKeyJava2DotNet(APIPrivateKey);

                    var decryptData = System.Text.Encoding.UTF8.GetString(RSAHelper.SectionDecrypt(HexHelper.HexStrTobyte(encryptData), privateKey));  //解密

                    var response = JsonHelper.Deserialize<AccountPingAnDM>(decryptData);

                    model = JsonHelper.Deserialize<AccountPingAnTransDataDM>(response.transData);

                    if (response.orderNo != null && model.data != null)
                    {
                        var pingAnOrderPaid = iPingAnOrderPaidService.Get(t => t.BankOrderNo == response.orderNo);

                        //更新免登地址(免登地址第二次进入则失效，需要重新生成免登地址)
                        var autoLoginUrl = iOrderPaidService.UpdateAutoLoginUrl(pingAnOrderPaid.OrderPaid);

                        if (pingAnOrderPaid != null)
                        {
                            model.data.OrderNumber = pingAnOrderPaid.OrderPaid.OrderNumber;
                            model.data.autoLoginUrl = autoLoginUrl;

                            var entity = iAccountPingAnService.Get(t => t.MemberID == pingAnOrderPaid.OrderPaid.MemberID) ?? new AccountPingAn();

                            //测试911
                            //model.data.outCardNo = "6222621310016529683";

                            entity.BankCardNumber = model.data.inCardNo;
                            entity.OutCardNo = model.data.outCardNo;
                            entity.CnName = model.data.cnName;
                            entity.Mobile = model.data.mobilePhone;
                            entity.Member.Mobile = model.data.mobilePhone;

                            iAccountPingAnService.Save(entity);
                            iAccountPingAnService.Commit();
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                logger.Error("数据异常:" + ex);
            }

            return View(model);
        }

        /// <summary>
        /// 平安端用户账户金额止付成功通知
        /// </summary>
        /// <returns></returns>
        public string FreezeSuccessNotify(FreezeSuccessNotifyRequest model)
        {
            var result = new FreezeSuccessNotityResponse();
            if (ModelState.IsValid)
            {
                var param = JsonHelper.Deserialize<Dictionary<string, string>>(JsonHelper.Serialize(model));

                var pingAnOrderPaid = iPingAnOrderPaidService.Get(t => t.BankOrderNo == model.orderNo.Trim());

                if (pingAnOrderPaid == null)
                {
                    logger.Error("未找到订单:" + model.orderNo);
                    Response.Write("error");
                    return "";
                }

                if (IsVerify(param))
                {
                    if (model.result == "00")
                    {
                        try
                        {
                            var orderPaid = iOrderPaidService.Get(t => t.ID == pingAnOrderPaid.OrderPaidID);

                            orderPaid.Status = OrderPaidStatusOption.FrozenSuccess.ToInt();

                            iOrderPaidService.Save(orderPaid);
                            iOrderPaidService.Commit();

                            iOrderPaidService.PingAnFreeze(pingAnOrderPaid, model.tradeTime);

                            result.returnCode = "000000";
                            result.returnMsg = "Success";
                        }
                        catch (Exception ex)
                        {
                            logger.Error("订单冻结通知失败:" + ex);
                            Response.Write("error");
                            result.returnMsg = ex.Message;
                        }
                    }
                    else
                    {
                        logger.Error("订单未冻结:" + model.result);
                        Response.Write("error");
                    }
                }
                else
                {
                    logger.Error("订单冻结验签失败:" + param);
                    result.returnMsg = "验签失败";
                }
            }

            return JsonHelper.Serialize(result);
        }

        public bool IsVerify(Dictionary<string, string> dicVerify)
        {
            string signString = "";
            try
            {
                //返回验签
                if (!dicVerify.ContainsKey("signature"))
                    throw new Exception("验签失败，返回内容未包含signature信息");

                string resultSign = dicVerify["signature"];

                dicVerify.Remove("signature");

                foreach (var m in dicVerify.Where(t => !string.IsNullOrWhiteSpace(t.Value)).OrderBy(t => t.Key))
                {
                    signString += "&" + m.Key + "=" + m.Value;
                }

                signString = signString.Substring(1);

                if (RSAHelper.SHA1WithRSAVerify(signString, resultSign, publicKey))
                {
                    return true;
                }
                else
                {
                    logger.Trace("验签失败，签名原串为:" + signString + "，加密signature为：" + resultSign);
                    return false;
                }
            }
            catch (Exception ex)
            {
                logger.Trace("验签失败，签名原串为:" + signString + "，错误为：" + ex.Message);
                return false;
            }
        }

        /// <summary>
        /// 百富POS调订单支付通知
        /// </summary>
        //public void POSOrderPaidNotify()
        //{
        //    Dictionary<string, string> param = HttpUtility.UrlDecode(content).ToDictionary(true);

        //    if (!param.ContainsKey("bizseq"))
        //    {
        //        logger.Error("bizseq不能为空");
        //        Response.Write("error");
        //    }

        //    string bizseq = param["bizseq"];

        //    var orderPaid = iOrderPaidService.Get(t => t.OrderNumber == bizseq);

        //    if (orderPaid == null)
        //    {
        //        logger.Error("订单支付回调没有找到订单:" + Request.Form.ToString());
        //        Response.Write("error");
        //        return;
        //    }

        //    //获取支付参数
        //    var preferences = iPreferencesService.Get(t => t.MerchantID == orderPaid.MerchantID);
        //    this.vspExec = new VSPExec(preferences.POSBaoMerchant, preferences.POSBaoKey, preferences.APPID);

        //    if (vspExec.IsVerify(param))//验签成功
        //    {
        //        POSOrderQueryResponse posOrderQueryResponse = JsonHelper.Deserialize<POSOrderQueryResponse>(JsonHelper.Serialize(param));
        //        byte[] bytes = Encoding.GetEncoding("gbk").GetBytes(posOrderQueryResponse.trxreserve ?? "");//将字符串转成gbk编码的字节数组 
        //        posOrderQueryResponse.trxreserve = Encoding.GetEncoding("utf-8").GetString(bytes);//将字节数组转回为字符串


        //        if (posOrderQueryResponse.trxstatus == "0000")
        //        {
        //            try
        //            {
        //                orderPaid.Status = OrderPaidStatusOption.PaySuccess.ToInt();

        //                orderPaid.PingAnOrderPaid.POSBaoSerialNumber = posOrderQueryResponse.trxid;

        //                iPingAnOrderPaidService.Save(orderPaid.PingAnOrderPaid);
        //                iOrderPaidService.Save(orderPaid);

        //                iOrderPaidService.Commit();
        //                iPingAnOrderPaidService.Commit();

        //                //订单支付成功---调代付（代付成功，代付失败，代付中），当代付成功将信息记录到代付表，并更新主订单金额   
        //                iOrderPaidService.PingAnTltSingleOntimePay(orderPaid);
        //            }
        //            catch (Exception ex)
        //            {
        //                logger.Error("订单充值失败:" + ex);
        //                Response.Write("error");
        //            }
        //        }
        //        else
        //        {
        //            logger.Error("订单支付失败:" + Request.Form.ToString());
        //            Response.Write("error");
        //        }
        //    }
        //    else
        //    {
        //        logger.Error("订单支付验签失败:" + Request.Form.ToString());
        //        Response.Write("error");
        //    }
        //}

        /// <summary>
        /// 收银宝订单查询接口
        /// </summary>
        //public void GetOrderMsg()
        //{
        //    string bizseq = "";
        //    string cusid = "";
        //    RspObj rsp = new RspObj();

        //    for (int i = 0; i < Request.Form.Count; i++)
        //    {
        //        if (Request.Form.Keys[i] == "bizseq")
        //        {
        //            bizseq = Request.Form[i].ToString();
        //        }
        //        if (Request.Form.Keys[i] == "cusid")
        //        {
        //            cusid = Request.Form[i].ToString();
        //        }
        //    }

        //    var orderpaid = iOrderPaidService.Get(t => t.OrderNumber == bizseq);

        //    Preferences preferences = iPreferencesService.Get(t => t.POSBaoMerchant == cusid);

        //    if (orderpaid == null)
        //    {
        //        rsp.init("9999", "订单不存在", preferences.APPID, preferences.POSBaoMerchant);
        //        rsp.amount = "";
        //        rsp.trxreserve = "";
        //        rsp.bizseq = "";
        //        rsp = BuildSignRspObj(rsp, preferences.POSBaoKey);//签名 
        //        Response.Write(JsonHelper.Serialize(rsp));
        //        return;
        //    }

        //    //Preferences preferences = iPreferencesService.Get(t => t.MerchantID == orderpaid.MerchantID);
        //    this.vspExec = new VSPExec(preferences.POSBaoMerchant, preferences.POSBaoKey, preferences.APPID);

        //    //获取支付参数
        //    string formString = HttpUtility.UrlDecode(Request.Form.ToString());
        //    Dictionary<String, String> dicReqeust = formString.ToDictionary(true);

        //    if (vspExec.IsVerify(dicReqeust))//验签成功
        //    {
        //        if (DateTime.Now > orderpaid.Project.Deadline)
        //        {
        //            rsp.init("9999", "订单已过期", preferences.APPID, preferences.POSBaoMerchant);
        //            rsp.amount = "";//由于nettonsoft.json会自动将空字段转化为null,因此手动赋值空字符串
        //            rsp.trxreserve = "";
        //            rsp.bizseq = "";
        //        }
        //        else
        //        {
        //            rsp.init("0000", "查询成功", preferences.APPID, preferences.POSBaoMerchant);
        //            rsp.amount = ((int)(orderpaid.TransactionAmount * 100)).ToString();
        //            // rsp.trxreserve = "05（业务类型）##订购人姓名#广州体育西（订购人地址）#15820335584（联系电话）#TN000001#01#440992198709257433（跟踪订单号）####";
        //            rsp.trxreserve = "05##" + orderpaid.Member.Name + "#" + orderpaid.MemberMobile + "#" + orderpaid.OrderNumber + "#######";
        //            //rsp.trxreserve = "05##" + "AAA" + "#" + orderpaid.MemberMobile + "#" + orderpaid.OrderNumber + "#######";
        //            rsp.bizseq = orderpaid.OrderNumber;//业务流水号
        //        }
        //    }
        //    else //验签失败
        //    {
        //        rsp.init("9999", "验签失败", preferences.APPID, preferences.POSBaoMerchant);
        //        rsp.amount = "";//由于nettonsoft.json会自动将空字段转化为null,因此手动赋值空字符串
        //        rsp.trxreserve = "";
        //        rsp.bizseq = "";
        //    }

        //    rsp = BuildSignRspObj(rsp, preferences.POSBaoKey);//签名 

        //    Response.Write(JsonHelper.Serialize(rsp));
        //}

        //public class RspObj
        //{
        //    public String appid;
        //    public String cusid;
        //    public String trxcode;
        //    public String timestamp;
        //    public String randomstr;
        //    public String sign;
        //    public String bizseq;
        //    public String retcode;
        //    public String retmsg;
        //    public String amount;
        //    public String trxreserve;

        //    public void init(String retCode, String retMsg, String APPID, String CUSID)
        //    {
        //        retcode = retCode;
        //        retmsg = retMsg;
        //        appid = APPID;
        //        cusid = CUSID;
        //        trxcode = "T001";
        //        timestamp = DateTime.Now.ToString("yyyyMMddHHmmss", DateTimeFormatInfo.InvariantInfo);
        //        randomstr = (new Random().Next(8999) + 1000).ToString();
        //    }

        //}

        /// <summary>
        /// 将查询结果实体加签
        /// </summary>
        /// <param name="rsp"></param>
        //public static RspObj BuildSignRspObj(RspObj rsp, string APPKEY)
        //{
        //    Dictionary<String, String> param = new Dictionary<string, string>();
        //    if (!String.IsNullOrEmpty(rsp.appid))
        //    {
        //        param.Add("appid", rsp.appid);
        //    }
        //    if (!String.IsNullOrEmpty(rsp.cusid))
        //    {
        //        param.Add("cusid", rsp.cusid);
        //    }
        //    if (!String.IsNullOrEmpty(rsp.trxcode))
        //    {
        //        param.Add("trxcode", rsp.trxcode);
        //    }
        //    if (!String.IsNullOrEmpty(rsp.timestamp))
        //    {
        //        param.Add("timestamp", rsp.timestamp);
        //    }
        //    if (!String.IsNullOrEmpty(rsp.randomstr))
        //    {
        //        param.Add("randomstr", rsp.randomstr);
        //    }
        //    if (!String.IsNullOrEmpty(rsp.bizseq))
        //    {
        //        param.Add("bizseq", rsp.bizseq);
        //    }
        //    if (!String.IsNullOrEmpty(rsp.retcode))
        //    {
        //        param.Add("retcode", rsp.retcode);
        //    }
        //    if (!String.IsNullOrEmpty(rsp.retmsg))
        //    {
        //        param.Add("retmsg", rsp.retmsg);
        //    }
        //    if (!String.IsNullOrEmpty(rsp.amount))
        //    {
        //        param.Add("amount", rsp.amount);
        //    }
        //    if (!String.IsNullOrEmpty(rsp.trxreserve))
        //    {
        //        param.Add("trxreserve", rsp.trxreserve);
        //    }
        //    param.Add("key", APPKEY);
        //    string blankStr = BuildParamStr(param);
        //    string sign = Framework.Security.Crypt.MD5(blankStr);
        //    rsp.sign = sign;
        //    return rsp;
        //}

        /// <summary>
        /// 将参数排序组装
        /// </summary>
        /// <param name="param"></param>
        /// <returns></returns>
        //public static String BuildParamStr(Dictionary<String, String> param)
        //{
        //    if (param == null || param.Count == 0)
        //    {
        //        return "";
        //    }
        //    Dictionary<String, String> ascDic = param.OrderBy(o => o.Key).ToDictionary(o => o.Key, p => p.Value);
        //    StringBuilder sb = new StringBuilder();
        //    foreach (var item in ascDic)
        //    {
        //        sb.Append(item.Key).Append("=").Append(item.Value).Append("&");
        //    }

        //    return sb.ToString().Substring(0, sb.ToString().Length - 1);
        //}
    }
}