using AIPXiaoTong.IService;
using AIPXiaoTong.Model;
using AIPXiaoTong.Model.Site;
using Framework.Common;
using Framework.LambdaExpression;
using Framework.Web.IOC;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using System.Threading.Tasks;
using Microsoft.Practices.Unity;

namespace AIPXiaoTong.Service
{
    public class OrderPaidService : BusinessService<OrderPaid>, IOrderPaidService
    {
        public override Expression<Func<OrderPaid, bool>> GetExpress<QM>(QM model)
        {
            Expression<Func<OrderPaid, bool>> express = DynamicExpressions.True<OrderPaid>();

            var m = model as OrderPaidQM;

            if (!string.IsNullOrWhiteSpace(m.OrderNumber))
            {
                express = express.AndAlso(t => t.OrderNumber == m.OrderNumber.Trim());
            }
            if (!string.IsNullOrWhiteSpace(m.MemberMobile))
            {
                express = express.AndAlso(t => t.Member.Mobile == m.MemberMobile.Trim());
            }
            if (!string.IsNullOrWhiteSpace(m.MemberName))
            {
                express = express.AndAlso(t => t.Member.Name.Contains(m.MemberName.Trim()));
            }
            if (m.ProjectID != null)
            {
                express = express.AndAlso(t => t.ProjectID == m.ProjectID);
            }
            if (m.Status != null)
            {
                express = express.AndAlso(t => t.Status == m.Status);
            }
            if (currentUser.MerchantID != 0)
            {
                express = express.AndAlso(t => t.Merchant.ID == currentUser.MerchantID);
            }

            if (m.QueryDate != null)
            {
                express = express.AndAlso(t => t.CreateDatetime >= m.QueryDate);
            }

            return express;
        }

        public override void Save(OrderPaid e)
        {
            if (e.ID == 0)
            {
                e.OrderNumber = GuidHelper.GenUniqueId();

                if (DateTime.Now > e.Project.Deadline)
                    throw new Exception("已过截止日期");

            }

            base.Save(e);
        }

        public List<OrderPaidEM> Export(OrderPaidQM model)
        {
            if (model == null) model = new OrderPaidQM();

            var express = GetExpress(model);

            var status = OrderPaidRechargeStatusOption.Success.ToInt();

            var list = Gets(express).Select(t => new OrderPaidEM()
            {
                OrderNumber = t.OrderNumber,
                ProjectName = t.Project.ProjectName,
                // HouseTypeName = t.HouseTypeShow.HouseTypeName,
                EquipmentSNNo = t.EquipmentSNNo,
                EmployeeName = t.Employee.Name,
                TransactionAmount = t.TransactionAmount,
                MemberName = t.Member.Name,
                MemberIDNumber = t.Member.IDNumber,
                MemberMobile = t.Member.Mobile,
                Status = t.Status,
                MerchantName = t.Merchant.Name,

            }).ToList();

            return list;
        }

        public void RechargeSuccess(OrderPaidRecharge orderPaidRecharge, string TransNumber, DateTime TransTime)
        {
            var iOrderPaidRechargeService = DIFactory.GetContainer().Resolve<IOrderPaidRechargeService>();
            var iMemberService = DIFactory.GetContainer().Resolve<IMemberService>();

            orderPaidRecharge.OrderPaid.Status = OrderPaidStatusOption.PaySuccess.ToInt();
            orderPaidRecharge.OrderPaid.Project.ResidueAmount -= orderPaidRecharge.Amount;
            Save(orderPaidRecharge.OrderPaid);

            orderPaidRecharge.Status = OrderPaidRechargeStatusOption.Success.ToInt();
            orderPaidRecharge.BankCardNumber = orderPaidRecharge.OrderPaid.Member.BankCardNumber;
            orderPaidRecharge.TransNumber = TransNumber;
            orderPaidRecharge.TransTime = TransTime;
            iOrderPaidRechargeService.Save(orderPaidRecharge);

            iMemberService.BalanceChange(orderPaidRecharge.OrderPaid.Member, orderPaidRecharge.Amount, MemberBalanceHistoryTypeOption.Recharge, remark: orderPaidRecharge.SerialNumber);

        }

        public void RechargeFail(OrderPaidRecharge orderPaidRecharge)
        {
            var iOrderPaidRechargeService = DIFactory.GetContainer().Resolve<IOrderPaidRechargeService>();

            orderPaidRecharge.Status = OrderPaidRechargeStatusOption.Fail.ToInt();
            iOrderPaidRechargeService.Save(orderPaidRecharge);

            orderPaidRecharge.OrderPaid.Status = OrderPaidStatusOption.Cancel.ToInt();
            Save(orderPaidRecharge.OrderPaid);

        }

        public void FreezeSuccess(OrderPaidFreeze orderPaidFreeze, decimal balance)
        {
            var iOrderPaidFreezeService = DIFactory.GetContainer().Resolve<IOrderPaidFreezeService>();
            var iMemberService = DIFactory.GetContainer().Resolve<IMemberService>();

            orderPaidFreeze.OrderPaid.Status = OrderPaidStatusOption.FrozenSuccess.ToInt();
            Save(orderPaidFreeze.OrderPaid);

            orderPaidFreeze.Balance = balance;
            orderPaidFreeze.Status = OrderPaidFreezeStatusOption.Success.ToInt();
            orderPaidFreeze.TransTime = DateTime.Now;
            iOrderPaidFreezeService.Save(orderPaidFreeze);

            iMemberService.BalanceChange(orderPaidFreeze.OrderPaid.Member, orderPaidFreeze.Amount * -1, MemberBalanceHistoryTypeOption.Freeze, orderPaidFreeze.Amount, remark: orderPaidFreeze.SerialNumber);

        }

        public void UnFreezeSuccess(OrderPaidUnFreeze orderPaidUnFreeze)
        {
            var iOrderPaidUnFreezeService = DIFactory.GetContainer().Resolve<IOrderPaidUnFreezeService>();
            var iMemberService = DIFactory.GetContainer().Resolve<IMemberService>();

            orderPaidUnFreeze.OrderPaid.Status = OrderPaidStatusOption.UnFrozenSuccess.ToInt();
            Save(orderPaidUnFreeze.OrderPaid);

            orderPaidUnFreeze.Status = OrderPaidUnFreezeStatusOption.Success.ToInt();
            orderPaidUnFreeze.TransTime = DateTime.Now;
            iOrderPaidUnFreezeService.Save(orderPaidUnFreeze);

            iMemberService.BalanceChange(orderPaidUnFreeze.OrderPaid.Member, orderPaidUnFreeze.Amount, MemberBalanceHistoryTypeOption.UnFreeze, orderPaidUnFreeze.Amount * -1, remark: orderPaidUnFreeze.SerialNumber);

        }

        public void WithdrawSuccess(OrderPaidWithdraw orderPaidWithdraw)
        {
            var iOrderPaidWithdrawService = DIFactory.GetContainer().Resolve<IOrderPaidWithdrawService>();
            var iMemberService = DIFactory.GetContainer().Resolve<IMemberService>();

            orderPaidWithdraw.OrderPaid.Status = OrderPaidStatusOption.WithdrawSuccess.ToInt();
            Save(orderPaidWithdraw.OrderPaid);

            orderPaidWithdraw.Status = OrderPaidWithdrawStatusOption.Success.ToInt();
            orderPaidWithdraw.TransTime = DateTime.Now;
            iOrderPaidWithdrawService.Save(orderPaidWithdraw);

            iMemberService.BalanceChange(orderPaidWithdraw.OrderPaid.Member, orderPaidWithdraw.Amount * -1, MemberBalanceHistoryTypeOption.Withdraw, remark: orderPaidWithdraw.SerialNumber);
        }

        public void WithdrawFail(OrderPaidWithdraw orderPaidWithdraw)
        {
            var iOrderPaidWithdrawService = DIFactory.GetContainer().Resolve<IOrderPaidWithdrawService>();

            orderPaidWithdraw.Status = OrderPaidWithdrawStatusOption.Fail.ToInt();
            iOrderPaidWithdrawService.Save(orderPaidWithdraw);


            orderPaidWithdraw.OrderPaid.Status = OrderPaidStatusOption.UnFrozenSuccess.ToInt();
            Save(orderPaidWithdraw.OrderPaid);
        }

        /// <summary>
        /// 同步状态
        /// </summary>
        /// <param name="orderPaid"></param>
        public void SyncStatus(OrderPaid orderPaid)
        {
            var iGuangDaAPIService = DIFactory.GetContainer().Resolve<IGuangDaAPIService>();
            var iOrderPaidRechargeService = DIFactory.GetContainer().Resolve<IOrderPaidRechargeService>();
            var iOrderPaidWithdrawService = DIFactory.GetContainer().Resolve<IOrderPaidWithdrawService>();

            if (orderPaid.Status == OrderPaidStatusOption.PayWait.ToInt())
            {
                var orderPaidRecharge = iOrderPaidRechargeService.GetLast(t => t.OrderPaidID == orderPaid.ID);

                //查询充值或提现状态
                var response = iGuangDaAPIService.BTrsVeriAmount(orderPaidRecharge.SerialNumber, orderPaidRecharge.CreateDatetime);

                if (response?.Body?.TrsState == "0")
                {
                    RechargeSuccess(orderPaidRecharge, "", DateTime.Now);
                }
                else if (response?.Body?.TrsState == "1")
                {
                    RechargeFail(orderPaidRecharge);
                }
                else if (response.IsNotExists && DateTime.Now > orderPaidRecharge.CreateDatetime.AddMonths(5))
                {
                    RechargeFail(orderPaidRecharge);
                }
            }
            else if (orderPaid.Status == OrderPaidStatusOption.FrozenWait.ToInt())
            {

            }
            else if (orderPaid.Status == OrderPaidStatusOption.UnFrozenWait.ToInt())
            {

            }
            else if (orderPaid.Status == OrderPaidStatusOption.WithdrawWait.ToInt())
            {
                var orderPaidWithdraw = iOrderPaidWithdrawService.GetLast(t => t.OrderPaidID == orderPaid.ID);

                //查询充值或提现状态
                var response = iGuangDaAPIService.BTrsVeriAmount(orderPaidWithdraw.SerialNumber, orderPaidWithdraw.CreateDatetime);

                if (response?.Body?.TrsState == "0")
                {
                    WithdrawSuccess(orderPaidWithdraw);
                }
                else if (response?.Body?.TrsState == "1")
                {
                    WithdrawFail(orderPaidWithdraw);
                }
                else if (response.IsNotExists && DateTime.Now > orderPaidWithdraw.CreateDatetime.AddMonths(5))
                {
                    WithdrawFail(orderPaidWithdraw);
                }
            }
        }


    }
}
