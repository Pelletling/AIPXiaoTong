using AIPXiaoTong.IService;
using AIPXiaoTong.Model;
using AIPXiaoTong.Model.API;
using AIPXiaoTong.Model.Site;
using Framework.Common;
//using GuangDaAPI;
using GuangDaAPI.Model;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using Framework.Requests;
using System.Security.Cryptography;
using System.Text;
using System.IO;
using System.Net;

namespace AIPXiaoTong.Site.Controllers
{
    public class TestController : Controller
    {
        private IMemberService iMemberManagementService;
        private IOrderBookingService iOrderBookingService;
        private IOrderHousePaymentService iOrderHousePaymentService;
        private IOrderPaidService iOrderPaidService;
        private IAreaGuangDaService iAreaGuangDaService;

        public TestController(IMemberService iMemberManagementService,
                                     IOrderBookingService iOrderBookingService,
                                     IOrderHousePaymentService iOrderHousePaymentService,
                                     IOrderPaidService iOrderPaidService,
                                     IAreaGuangDaService iAreaGuangDaService)
        {
            this.iMemberManagementService = iMemberManagementService;
            this.iOrderBookingService = iOrderBookingService;
            this.iOrderHousePaymentService = iOrderHousePaymentService;
            this.iOrderPaidService = iOrderPaidService;
            this.iAreaGuangDaService = iAreaGuangDaService;
        }

        //private GuangDaExec guangDaExec;

        public ActionResult area()
        {
            var model = new AreaGuangDaQM();

            var list = iAreaGuangDaService.GetListModel<AreaGuangDaLM, AreaGuangDaQM>();



            return View();
        }

        //public ActionResult Member()
        //{
        //    var entity = new Member();

        //    entity.Name = "翠花";
        //    entity.IDNumber = "121212121212121212";
        //    entity.Mobile = "15212154556";
        //    entity.Status = 1;
        //    entity.ProvinceCode = "13";
        //    entity.CityCode = "1301";
        //    entity.IDImageFront = @"\Images\ProjectImage\a08c05ba-a755-495b-bf3d-72e3c2e61297.jpg";
        //    entity.IDImageOpposite = @"\Images\ProjectImage\75ccc33c-2bca-4419-b643-45efb58df412.jpg";
        //    entity.Address = "河北省石家庄市三心小区6栋606";
        //    entity.ClientId = "d56081f632a40980";
        //    entity.EnName = "asdsa";
        //    entity.IdExpiredDate = DateTime.Now;
        //    entity.PostCode = "131313";
        //    entity.IsCreateAccount = 0;

        //    iMemberManagementService.Save(entity);
        //    iMemberManagementService.Commit();

        //    return View();
        //}

        public ActionResult InsertOrderBooking()
        {
            var entity = new OrderBooking();

            entity.MerchantID = 1;
            entity.OrderNumber = "20180914141342493990";
            entity.ProjectID = 24;
            entity.EquipmentSNNo = "600047000102";
            entity.EmployeeID = 7;
            entity.MemberID = 2;
            entity.OrderTime = DateTime.Now;
            entity.Remark = "asdsadsadsa";

            iOrderBookingService.Save(entity);
            iOrderBookingService.Commit();

            return View();
        }

        public ActionResult OrderHousePayment()
        {
            decimal dec = 66;
            var entity = new OrderHousePayment();

            entity.MerchantID = 1;

            entity.OrderNumber = "20181107163729899799";
            entity.ProjectID = 24;
            entity.EquipmentSNNo = "600047000103";
            entity.EmployeeID = 7;
            entity.TransactionAmount = dec;
            entity.SerialNumber = "	111863250000001641";
            entity.MemberID = 2;
            entity.Status = 1;
            entity.PaymentStatus = 1;
            entity.PaymentType = 2;

            iOrderHousePaymentService.Save(entity);
            iOrderHousePaymentService.Commit();


            return View();
        }

        public ActionResult OrderPaid()
        {
            decimal dec = 76;
            var entity = new OrderPaid();

            entity.MerchantID = 1;

            entity.OrderNumber = "20181107163253195868";
            //  entity.HouseTypeShowID = 24;
            entity.EquipmentSNNo = "600047000103";
            entity.EmployeeID = 7;
            entity.TransactionAmount = dec;
            //entity.SerialNumber = "	111863250000001641";
            entity.MemberID = 2;
            entity.Status = 1;
            // entity.PaymentStatus = 0;
            //entity.PaymentType = 2;

            //entity.BankCardNumber = "123456789987654";
            entity.Remark = "a昂达三季度噶三季度撒";


            iOrderPaidService.Save(entity);
            iOrderPaidService.Commit();


            return View();
        }

        public string testtime()
        {
            var time = "201811+25";

            var tar = time.Replace("+", "%2B");

            var dateTime = DateTime.ParseExact(time, "yyyyMMdd", CultureInfo.CurrentCulture);

            var datetime2 = time.ToDateTime("yyyyMMdd");

            return JsonHelper.Serialize(time);
        }

        public string testimg()
        {
            string result = "";
            string url = "http://localhost:8023/Api/CreateMember";
            //  var path = @"D:\VS Project\Program\AIPXiaoTong\AIPXiaoTong.Site\Images\a1.jpg";
            var path = @"D:\VS Project\Program\AIPXiaoTong\AIPXiaoTong.Site\Images\test.jpg";
            var source = ImageHelper.ToBase64(path);

            CreateMemberRequst request = new CreateMemberRequst();

            request.requestno = "12334567890";
            request.equipmentsnno = "20161106200501";
            request.name = "zhangsan";
            request.idnumber = "430981199211114635";
            request.idimagefront = source;
            request.idimageopposite = source;
            request.idexpireddate = "2018-10-18 00:00:00.000";

            // string txtParams = "data=idexpireddate%3d2018-10-18%26%e7%a9%ba%e6%a0%bc%2600%3a00%3a00.000%26idimagefront%3d%2f9j%2f4AAQSkZJRgABAQEAYABgAAD%2f4QA6RXhpZgAATU0AKgAAAAgAA1EQAAEAAAABAQAAAFERAAQAAAABAAAOxFESAAQAAAABAAAOxAAAAAD%2f2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL%2f2wBDAQkJCQwLDBgNDRgyIRwhMjIyMjIyMjIyMjIyMjfk%2bnYUlpbyXFwrLEQB1bHFbNro6rh5%2bT12elXygQAKoUDsBXoYLCVG%2beozGrVilaJz97pomTbwO9Q6VBNo%2boKwO6CX5SO6mt6RAaaqDPIB5r3PZROPnZqq%2bQKYxMbb16H7wqOJuMVN161lOI0yQMCMjkUZquh8t9h%2b6eVNTZrMocTRmmZozWckUhxNJupuaSuaSsWh4anhqgpwNKMmmDJw3cnisLV7jT5QQZFEq9MCl1u%2fMFv5SHDN3rkJH3E7jz61pPGOk7II0VI1ARjg8UVnQu3ljDmiumOYKxm8OzdcnC%2fStXTI08nft%2bY96KK8DLUnUO2s9C61RPRRX1EDz2RNUa%2feoorXoQTpU9FFZSKQyb%2fAFefQ1KOlFFYPcoKSiiokUg70h9aKK55loKDwPwooqIbg9jm9f8AvL9K5xu9FFcGK%2bM6qXwksB%2fdCiiiktgP%2f9k%3d%26idnumber%3d430981199211114635%26name%3dzhangsan%26requestno%3d12334567890%26equipmentsnno%3d20161106200501";
            string txtParams = "data=idexpireddate%3d2018-10-18%26%e7%a9%ba%e6%a0%bc%2600%3a00%3a00.000%26idimagefront%3d%2f9j%2f4AAQCiiiktgP%2f9k%3d%26idnumber%3d430981199211114635%26name%3dzhangsan%26requestno%3d12334567890%26equipmentsnno%3d20161106200501";


            result = Framework.Requests.Request.Post(url, txtParams);

            return JsonHelper.Serialize(request);
        }


        public string BBCTest()
        {
            //Dictionary<string, string> postParams = new Dictionary<string, string>();
            //postParams.Add("channel", "1007041");
            //postParams.Add("signType", "RSA");
            //postParams.Add("userName", "刘勋");
            //postParams.Add("cardNumber", "430981199211104634");
            //postParams.Add("mobile", "15273738880");
            //postParams.Add("businessName", "购机业务");
            //postParams.Add("orderValidDay", "4");
            //postParams.Add("freezeAmt", "0.01");
            //postParams.Add("freezeTimeLimit","4");
            //postParams.Add("freezeProduct", "1");
            //postParams.Add("autoFreeze", "00");
            //postParams.Add("transCode", "001");

            string a = AppDomain.CurrentDomain.BaseDirectory;
            string privateKeyPath = FileHelper.Read(AppDomain.CurrentDomain.BaseDirectory+ "pingan/pingan_private_key.pem");
            string publicKeyPath = FileHelper.Read(AppDomain.CurrentDomain.BaseDirectory+ "pingan/pingan_public_key.pem");
            string signContent = "channel=1007041&userName=刘勋&cardNumber=430981199211104634&mobile=15273738880&businessName=购机业务&orderValidDay=4&freezeAmt=0.01&freezeTimeLimit=4&freezeProduct=1&autoFreeze =00&transCode=001";

            var sign = RSASignCharSet(signContent, privateKeyPath, "RSA");


            return "";
        }

        public static string RSASignCharSet(string data, string privateKeyPem, string signType)
        {

            byte[] signatureBytes = null;
            try
            {
                RSACryptoServiceProvider rsaCsp = null;

                //字符串获取
                rsaCsp = LoadCertificateString(privateKeyPem, signType);

                byte[] dataBytes = null;
                //if (string.IsNullOrEmpty(charset))
                //{
                dataBytes = Encoding.UTF8.GetBytes(data);
                //}
                //else
                //{
                //    dataBytes = Encoding.GetEncoding(charset).GetBytes(data);
                //}
                if (null == rsaCsp)
                {
                    throw new Exception("您使用的私钥格式错误，请检查RSA私钥配置" + ",charset = ");
                }
                if ("RSA2".Equals(signType))
                {
                    signatureBytes = rsaCsp.SignData(dataBytes, "SHA256");
                }
                else
                {
                    signatureBytes = rsaCsp.SignData(dataBytes, "SHA1");
                }

            }
            catch (Exception)
            {
                throw new Exception("您使用的私钥格式错误，请检查RSA私钥配置" + ",charset = ");
            }
            return Convert.ToBase64String(signatureBytes);
        }

        private static RSACryptoServiceProvider LoadCertificateString(string strKey, string signType)
        {
            byte[] data = null;
            //读取带
            //ata = Encoding.Default.GetBytes(strKey);
            data = Convert.FromBase64String(strKey);
            //data = GetPem("RSA PRIVATE KEY", data);
            try
            {
               RSACryptoServiceProvider rsa = DecodeRSAPrivateKey(data, signType);
             // RSACryptoServiceProvider rsa=
                return rsa;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return null;
        }

        private static RSACryptoServiceProvider DecodeRSAPrivateKey(byte[] privkey, string signType)
        {
            byte[] MODULUS, E, D, P, Q, DP, DQ, IQ;

            // --------- Set up stream to decode the asn.1 encoded RSA private key ------
            MemoryStream mem = new MemoryStream(privkey);
            BinaryReader binr = new BinaryReader(mem);  //wrap Memory Stream with BinaryReader for easy reading
            byte bt = 0;
            ushort twobytes = 0;
            int elems = 0;
            try
            {
                twobytes = binr.ReadUInt16();
                if (twobytes == 0x8130) //data read as little endian order (actual data order for Sequence is 30 81)
                    binr.ReadByte();    //advance 1 byte
                else if (twobytes == 0x8230)
                    binr.ReadInt16();    //advance 2 bytes
                else
                    return null;

                twobytes = binr.ReadUInt16();
                if (twobytes != 0x0102) //version number
                    return null;
                bt = binr.ReadByte();
                if (bt != 0x00)
                    return null;


                //------ all private key components are Integer sequences ----
                elems = GetIntegerSize(binr);
                MODULUS = binr.ReadBytes(elems);

                elems = GetIntegerSize(binr);
                E = binr.ReadBytes(elems);

                elems = GetIntegerSize(binr);
                D = binr.ReadBytes(elems);

                elems = GetIntegerSize(binr);
                P = binr.ReadBytes(elems);

                elems = GetIntegerSize(binr);
                Q = binr.ReadBytes(elems);

                elems = GetIntegerSize(binr);
                DP = binr.ReadBytes(elems);

                elems = GetIntegerSize(binr);
                DQ = binr.ReadBytes(elems);

                elems = GetIntegerSize(binr);
                IQ = binr.ReadBytes(elems);


                // ------- create RSACryptoServiceProvider instance and initialize with public key -----
                CspParameters CspParameters = new CspParameters();
                CspParameters.Flags = CspProviderFlags.UseMachineKeyStore;

                int bitLen = 1024;
                if ("RSA2".Equals(signType))
                {
                    bitLen = 2048;
                }

                RSACryptoServiceProvider RSA = new RSACryptoServiceProvider(bitLen, CspParameters);
                RSAParameters RSAparams = new RSAParameters();
                RSAparams.Modulus = MODULUS;
                RSAparams.Exponent = E;
                RSAparams.D = D;
                RSAparams.P = P;
                RSAparams.Q = Q;
                RSAparams.DP = DP;
                RSAparams.DQ = DQ;
                RSAparams.InverseQ = IQ;
                RSA.ImportParameters(RSAparams);
                return RSA;
            }
            catch (Exception)
            {
                return null;
            }
            finally
            {
                binr.Close();
            }
        }

        private static int GetIntegerSize(BinaryReader binr)
        {
            byte bt = 0;
            byte lowbyte = 0x00;
            byte highbyte = 0x00;
            int count = 0;
            bt = binr.ReadByte();
            if (bt != 0x02)		//expect integer
                return 0;
            bt = binr.ReadByte();

            if (bt == 0x81)
                count = binr.ReadByte();	// data size in next byte
            else
                if (bt == 0x82)
            {
                highbyte = binr.ReadByte(); // data size in next 2 bytes
                lowbyte = binr.ReadByte();
                byte[] modint = { lowbyte, highbyte, 0x00, 0x00 };
                count = BitConverter.ToInt32(modint, 0);
            }
            else
            {
                count = bt;     // we already have the data size
            }

            while (binr.ReadByte() == 0x00)
            {	//remove high order zeros in data
                count -= 1;
            }
            binr.BaseStream.Seek(-1, SeekOrigin.Current);		//last ReadByte wasn't a removed zero, so back up a byte
            return count;
        }     

    }
}