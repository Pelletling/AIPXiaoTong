using AIPXiaoTong.IService;
using AIPXiaoTong.Model;
using Framework.Common;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Web;
using System.Web.Mvc;
using VSP.Pay;
using VSP.Pay.ResponseModel;

namespace AIPXiaoTong.Site.Controllers
{
    [AllowAnonymous]
    public class NotifyController : BaseController
    {
        private IOrderHousePaymentService iOrderHousePaymentService;
        private IPreferencesService iPreferencesService;
        private IOrderPaidService iOrderPaidService;

        VSPExec vspExec = null;

        public NotifyController(IOrderHousePaymentService iOrderHousePaymentService,
                                                 IPreferencesService iPreferencesService,
                                                 IOrderPaidService iOrderPaidService)
        {
            this.iOrderHousePaymentService = iOrderHousePaymentService;
            this.iPreferencesService = iPreferencesService;
            this.iOrderPaidService = iOrderPaidService;
        }


        //public void POSOrderHousePaymentNotify()
        //{ 
        //    String bizseq = "";
        //    for (int i = 0; i < Request.Form.Count; i++)
        //    {
        //        if (Request.Form.Keys[i] == "bizseq")
        //        {
        //            bizseq = Request.Form[i].ToString();
        //            break;
        //        }
        //    }
        //    if (string.IsNullOrEmpty(bizseq))
        //    {
        //        return;
        //    }

        //    var orderHousePayment = iOrderHousePaymentService.Get(t=>t.OrderNumber==bizseq);

        //    if (orderHousePayment == null)
        //    {
        //        logger.Error("订单支付回调没有找到订单:" + Request.Form.ToString());
        //        Response.Write("error");
        //        return;
        //    }
        //    //获取支付参数
        //    var preferences = iPreferencesService.Get(t=>t.MerchantID==orderHousePayment.MerchantID);
        //    this.vspExec = new VSPExec(preferences.POSBaoMerchant,preferences.POSBaoKey,preferences.APPID);

        //    string formString = HttpUtility.UrlDecode(Request.Form.ToString());
        //    Dictionary<String, String> dicReqeust = formString.ToDictionary(true);
        //    if (vspExec.IsVerify(dicReqeust))//验签成功
        //    {
        //        POSOrderQueryResponse posOrderQueryResponse = JsonHelper.Deserialize<POSOrderQueryResponse>(JsonHelper.Serialize(dicReqeust));
        //        byte[] bytes = Encoding.GetEncoding("gbk").GetBytes(posOrderQueryResponse.trxreserve ?? "");//将字符串转成gbk编码的字节数组 
        //        posOrderQueryResponse.trxreserve = Encoding.GetEncoding("utf-8").GetString(bytes);//将字节数组转回为字符串

        //        //posOrderQueryResponse.trxcode = "";
        //        //VSP001 = 消费
        //        //VSP002 = 消费撤销
        //        //VSP003 = 退货
        //        //VSP004 = 预授权
        //        //VSP005 = 预授权撤销
        //        //VSP006 = 预授权完成
        //        //VSP007 = 预授权完成撤销
        //        //CMN001 = 消费冲正
        //        //CMN002 = 预授权冲正
        //        //CMN003 = 预授权完成冲正
        //        //VSP501 = 微信支付
        //        //VSP502 = 微信支付撤销
        //        //VSP503 = 微信支付退款
        //        //VSP511 = 支付宝支付
        //        //VSP512 = 支付宝支付撤销
        //        //VSP513 = 支付宝支付退货
        //        //VSP521 = 通联钱包消费
        //        //VSP522 = 通联钱包消费撤销
        //        //VSP523 = 通联钱包消费退货
        //        //VSP505 = 手机QQ 支付
        //        //VSP506 = 手机QQ支付撤销
        //        //VSP507 = 手机QQ支付退款
        //        //VSP551 = 银联扫码支付
        //        //VSP552 = 银联扫码撤销
        //        //VSP553 = 银联扫码退货
        //        if (posOrderQueryResponse.trxcode == "VSP002" || posOrderQueryResponse.trxcode == "VSP003" || posOrderQueryResponse.trxcode == "VSP003"
        //            || posOrderQueryResponse.trxcode == "VSP502" || posOrderQueryResponse.trxcode == "VSP503"
        //            || posOrderQueryResponse.trxcode == "VSP512" || posOrderQueryResponse.trxcode == "VSP513"
        //            || posOrderQueryResponse.trxcode == "VSP522" || posOrderQueryResponse.trxcode == "VSP523"
        //            || posOrderQueryResponse.trxcode == "VSP506" || posOrderQueryResponse.trxcode == "VSP507"
        //            || posOrderQueryResponse.trxcode == "VSP552" || posOrderQueryResponse.trxcode == "VSP553")
        //        {
        //            if (posOrderQueryResponse.trxstatus == "0000")
        //            {
        //                if (orderHousePayment.PaymentStatus==PaymentStatusEnum.Paid.ToInt())   //退款--如果状态为已付款
        //                {
        //                    orderHousePayment.PaymentStatus = PaymentStatusEnum.Unpaid.ToInt();   //订单支付状态改为：未支付
        //                    orderHousePayment.Status = OrderStatusEnum.Refunded.ToInt();  //  订单状态改为：已退款

        //                    iOrderHousePaymentService.Save(orderHousePayment);
        //                    iOrderHousePaymentService.Commit();
        //                }

        //            }
        //        }
        //        else
        //        {

        //            if (posOrderQueryResponse.trxstatus == "0000")
        //            {

        //                if (orderHousePayment.PaymentStatus == PaymentStatusEnum.Unpaid.ToInt())
        //                {
        //                    orderHousePayment.PaymentStatus = PaymentStatusEnum.Paid.ToInt();
        //                    orderHousePayment.Status = OrderStatusEnum.Success.ToInt();

        //                    iOrderHousePaymentService.Save(orderHousePayment);
        //                    iOrderHousePaymentService.Commit();
        //                }
        //                else
        //                {
        //                    if (orderHousePayment.PaymentStatus != PaymentStatusEnum.Paid.ToInt())
        //                    {
        //                        logger.Error("订单支付支完成，但更新支付状态失败，当前状态为：" + orderHousePayment.PaymentStatus + "," + Request.Form.ToString());
        //                        Response.Write("error");
        //                    }
        //                }
        //            }
        //            else
        //            {
        //                logger.Error("订单支付支付失败:" + Request.Form.ToString());
        //                Response.Write("error");
        //            }
        //        }

        //    }
        //    else
        //    {
        //        logger.Error("订单支付验签失败:" + Request.Form.ToString());
        //        Response.Write("error");
        //    }

        //}



        //public void POSOrderPaidNotify()
        //{
        //    String bizseq = "";
        //    var a = Request.Form.ToString();
        //    for (int i = 0; i < Request.Form.Count; i++)
        //    {
        //        if (Request.Form.Keys[i] == "bizseq")
        //        {
        //            bizseq = Request.Form[i].ToString();
        //            break;
        //        }
        //    }
        //    if (string.IsNullOrEmpty(bizseq))
        //    {
        //        return;
        //    }

        //    var orderPaid = iOrderPaidService.Get(t => t.OrderNumber == bizseq);

        //    if (orderPaid == null)
        //    {
        //        logger.Error("订单支付回调没有找到订单:" + Request.Form.ToString());
        //        Response.Write("error");
        //        return;
        //    }
        //    //获取支付参数
        //    var preferences = iPreferencesService.Get(t => t.MerchantID == orderPaid.MerchantID);
        //    this.vspExec = new VSPExec(preferences.POSBaoMerchant, preferences.POSBaoKey, preferences.APPID);

        //    string formString = HttpUtility.UrlDecode(Request.Form.ToString());
        //    Dictionary<String, String> dicReqeust = formString.ToDictionary(true);
        //    if (vspExec.IsVerify(dicReqeust))//验签成功
        //    {
        //        POSOrderQueryResponse posOrderQueryResponse = JsonHelper.Deserialize<POSOrderQueryResponse>(JsonHelper.Serialize(dicReqeust));
        //        byte[] bytes = Encoding.GetEncoding("gbk").GetBytes(posOrderQueryResponse.trxreserve ?? "");//将字符串转成gbk编码的字节数组 
        //        posOrderQueryResponse.trxreserve = Encoding.GetEncoding("utf-8").GetString(bytes);//将字节数组转回为字符串

        //        //posOrderQueryResponse.trxcode = "";
        //        //VSP001 = 消费
        //        //VSP002 = 消费撤销
        //        //VSP003 = 退货
        //        //VSP004 = 预授权
        //        //VSP005 = 预授权撤销
        //        //VSP006 = 预授权完成
        //        //VSP007 = 预授权完成撤销
        //        //CMN001 = 消费冲正
        //        //CMN002 = 预授权冲正
        //        //CMN003 = 预授权完成冲正
        //        //VSP501 = 微信支付
        //        //VSP502 = 微信支付撤销
        //        //VSP503 = 微信支付退款
        //        //VSP511 = 支付宝支付
        //        //VSP512 = 支付宝支付撤销
        //        //VSP513 = 支付宝支付退货
        //        //VSP521 = 通联钱包消费
        //        //VSP522 = 通联钱包消费撤销
        //        //VSP523 = 通联钱包消费退货
        //        //VSP505 = 手机QQ 支付
        //        //VSP506 = 手机QQ支付撤销
        //        //VSP507 = 手机QQ支付退款
        //        //VSP551 = 银联扫码支付
        //        //VSP552 = 银联扫码撤销
        //        //VSP553 = 银联扫码退货
        //        if (posOrderQueryResponse.trxcode == "VSP002" || posOrderQueryResponse.trxcode == "VSP003" || posOrderQueryResponse.trxcode == "VSP003"
        //            || posOrderQueryResponse.trxcode == "VSP502" || posOrderQueryResponse.trxcode == "VSP503"
        //            || posOrderQueryResponse.trxcode == "VSP512" || posOrderQueryResponse.trxcode == "VSP513"
        //            || posOrderQueryResponse.trxcode == "VSP522" || posOrderQueryResponse.trxcode == "VSP523"
        //            || posOrderQueryResponse.trxcode == "VSP506" || posOrderQueryResponse.trxcode == "VSP507"
        //            || posOrderQueryResponse.trxcode == "VSP552" || posOrderQueryResponse.trxcode == "VSP553")
        //        {
        //            if (posOrderQueryResponse.trxstatus == "0000")
        //            {
        //                if (orderPaid.Status == OrderPaidStatusOption.Success.ToInt())   //退款--如果状态为已付款
        //                {
        //                    orderPaid.Status = OrderStatusEnum.Refunded.ToInt();  //  订单状态改为：已退款

        //                    iOrderPaidService.Save(orderPaid);
        //                    iOrderPaidService.Commit();
        //                }
        //            }
        //        }
        //        else
        //        {

        //            if (posOrderQueryResponse.trxstatus == "0000")
        //            {

        //                if (orderPaid.Status == OrderStatusEnum.Unpaid.ToInt())
        //                {
        //                    orderPaid.Status = OrderStatusEnum.Success.ToInt();
        //                    //orderPaid.SerialNumber = posOrderQueryResponse.traceno;
        //                    //orderPaid.PaymentType = posOrderQueryResponse.accttype.ToInt();
        //                    //orderPaid.PaidTime = Convert.ToDateTime(posOrderQueryResponse.paytime);
        //                    //orderPaid.BankCardNumber = posOrderQueryResponse.acct;  //刷卡交易为;交易卡号，微信则为openid，支付宝为userid

        //                    iOrderPaidService.Save(orderPaid);
        //                    iOrderPaidService.Commit();
        //                }
        //            }
        //            else
        //            {
        //                logger.Error("订单支付支付失败:" + Request.Form.ToString());
        //                Response.Write("error");
        //            }
        //        }
        //    }
        //    else
        //    {
        //        logger.Error("订单支付验签失败:" + Request.Form.ToString());
        //        Response.Write("error");
        //    }
        //}


        public class RspObj
        {
            public String appid;
            public String cusid;
            public String trxcode;
            public String timestamp;
            public String randomstr;
            public String sign;
            public String bizseq;
            public String retcode;
            public String retmsg;
            public String amount;
            public String trxreserve;

            public void init(String retCode, String retMsg, String APPID, String CUSID)
            {
                retcode = retCode;
                retmsg = retMsg;
                appid = APPID;
                cusid = CUSID;
                trxcode = "T001";
                timestamp = DateTime.Now.ToString("yyyyMMddHHmmss", DateTimeFormatInfo.InvariantInfo);
                randomstr = (new Random().Next(8999) + 1000).ToString();
            }

        }

        /// <summary>
        /// 将参数排序组装
        /// </summary>
        /// <param name="param"></param>
        /// <returns></returns>
        public static String BuildParamStr(Dictionary<String, String> param)
        {
            if (param == null || param.Count == 0)
            {
                return "";
            }
            Dictionary<String, String> ascDic = param.OrderBy(o => o.Key).ToDictionary(o => o.Key, p => p.Value);
            StringBuilder sb = new StringBuilder();
            foreach (var item in ascDic)
            {
                sb.Append(item.Key).Append("=").Append(item.Value).Append("&");
            }

            return sb.ToString().Substring(0, sb.ToString().Length - 1);
        }

        /// <summary>
        /// 将查询结果实体加签
        /// </summary>
        /// <param name="rsp"></param>
        public static RspObj BuildSignRspObj(RspObj rsp, string APPKEY)
        {
            Dictionary<String, String> param = new Dictionary<string, string>();
            if (!String.IsNullOrEmpty(rsp.appid))
            {
                param.Add("appid", rsp.appid);
            }
            if (!String.IsNullOrEmpty(rsp.cusid))
            {
                param.Add("cusid", rsp.cusid);
            }
            if (!String.IsNullOrEmpty(rsp.trxcode))
            {
                param.Add("trxcode", rsp.trxcode);
            }
            if (!String.IsNullOrEmpty(rsp.timestamp))
            {
                param.Add("timestamp", rsp.timestamp);
            }
            if (!String.IsNullOrEmpty(rsp.randomstr))
            {
                param.Add("randomstr", rsp.randomstr);
            }
            if (!String.IsNullOrEmpty(rsp.bizseq))
            {
                param.Add("bizseq", rsp.bizseq);
            }
            if (!String.IsNullOrEmpty(rsp.retcode))
            {
                param.Add("retcode", rsp.retcode);
            }
            if (!String.IsNullOrEmpty(rsp.retmsg))
            {
                param.Add("retmsg", rsp.retmsg);
            }
            if (!String.IsNullOrEmpty(rsp.amount))
            {
                param.Add("amount", rsp.amount);
            }
            if (!String.IsNullOrEmpty(rsp.trxreserve))
            {
                param.Add("trxreserve", rsp.trxreserve);
            }
            param.Add("key", APPKEY);
            String blankStr = BuildParamStr(param);
            String sign = Framework.Security.Crypt.MD5(blankStr);
            rsp.sign = sign;
            return rsp;
        }

        public void GetOrderMsg()
        {
            string bizseq = "";
            string cusid = "";
            RspObj rsp = new RspObj();

            var a = Request.Form.ToString();

            for (int i = 0; i < Request.Form.Count; i++)
            {
                if (Request.Form.Keys[i] == "bizseq")
                {
                    bizseq = Request.Form[i].ToString();
                }
                if (Request.Form.Keys[i] == "cusid")
                {
                    cusid = Request.Form[i].ToString();
                }
            }

            var orderpaid = iOrderPaidService.Get(t => t.OrderNumber == bizseq);

            Preferences preferences = iPreferencesService.Get(t => t.POSBaoMerchant == cusid);

            if (orderpaid == null)
            {
                rsp.init("9999", "订单不存在", preferences.APPID, preferences.POSBaoMerchant);
                rsp.amount = "";
                rsp.trxreserve = "";
                rsp.bizseq = "";
                rsp = BuildSignRspObj(rsp, preferences.POSBaoKey);//签名 
                Response.Write(JsonHelper.Serialize(rsp));
                return;
            }

            //Preferences preferences = iPreferencesService.Get(t => t.MerchantID == orderpaid.MerchantID);
            this.vspExec = new VSPExec(preferences.POSBaoMerchant, preferences.POSBaoKey, preferences.APPID);

            //获取支付参数
            string formString = HttpUtility.UrlDecode(Request.Form.ToString());
            Dictionary<String, String> dicReqeust = formString.ToDictionary(true);

            if (vspExec.IsVerify(dicReqeust))//验签成功
            {
                if (DateTime.Now > orderpaid.Project.Deadline)
                {
                    rsp.init("9999", "订单已过期", preferences.APPID, preferences.POSBaoMerchant);
                    rsp.amount = "";//由于nettonsoft.json会自动将空字段转化为null,因此手动赋值空字符串
                    rsp.trxreserve = "";
                    rsp.bizseq = "";
                }
                else
                {
                    rsp.init("0000", "查询成功", preferences.APPID, preferences.POSBaoMerchant);
                    rsp.amount = ((int)(orderpaid.TransactionAmount * 100)).ToString();
                    // rsp.trxreserve = "05（业务类型）##订购人姓名#广州体育西（订购人地址）#15820335584（联系电话）#TN000001#01#440992198709257433（跟踪订单号）####";
                    rsp.trxreserve = "05##" + orderpaid.Member.Name + "#" + orderpaid.Member.Address + "#" + orderpaid.MemberMobile + "#" + orderpaid.OrderNumber + "#######";
                    rsp.bizseq = orderpaid.OrderNumber;//业务流水号
                }
            }
            else //验签失败
            {
                rsp.init("9999", "验签失败", preferences.APPID, preferences.POSBaoMerchant);
                rsp.amount = "";//由于nettonsoft.json会自动将空字段转化为null,因此手动赋值空字符串
                rsp.trxreserve = "";
                rsp.bizseq = "";
            }

            rsp = BuildSignRspObj(rsp, preferences.POSBaoKey);//签名 

            Response.Write(JsonHelper.Serialize(rsp));

        }
    }
}